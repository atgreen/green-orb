// Code generated by generate-tests; DO NOT EDIT.

package main

import (
	"bytes"
	. "bytes"
	pkg "bytes"
)


func main_bytes() {
	{
		
		_ = bytes.Compare([]byte{'f','o','o','b','a','r'}, []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = bytes.Compare([]byte{'f','o','o','b','a','r'}, []byte("foobar")) 
	}

	{
		
		_ = bytes.Compare([]byte("foobar"), []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = bytes.Compare([]byte("foobar"), []byte("foobar")) // want `avoid allocations with strings\.Compare`
	}

	{
		
		_ = Compare([]byte{'f','o','o','b','a','r'}, []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = Compare([]byte{'f','o','o','b','a','r'}, []byte("foobar")) 
	}

	{
		
		_ = Compare([]byte("foobar"), []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = Compare([]byte("foobar"), []byte("foobar")) // want `avoid allocations with strings\.Compare`
	}

	{
		
		_ = pkg.Compare([]byte{'f','o','o','b','a','r'}, []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = pkg.Compare([]byte{'f','o','o','b','a','r'}, []byte("foobar")) 
	}

	{
		
		_ = pkg.Compare([]byte("foobar"), []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = pkg.Compare([]byte("foobar"), []byte("foobar")) // want `avoid allocations with strings\.Compare`
	}

	{
		
		_ = bytes.Contains([]byte{'f','o','o','b','a','r'}, []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = bytes.Contains([]byte{'f','o','o','b','a','r'}, []byte("foobar")) 
	}

	{
		
		_ = bytes.Contains([]byte("foobar"), []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = bytes.Contains([]byte("foobar"), []byte("foobar")) // want `avoid allocations with strings\.Contains`
	}

	{
		
		_ = Contains([]byte{'f','o','o','b','a','r'}, []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = Contains([]byte{'f','o','o','b','a','r'}, []byte("foobar")) 
	}

	{
		
		_ = Contains([]byte("foobar"), []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = Contains([]byte("foobar"), []byte("foobar")) // want `avoid allocations with strings\.Contains`
	}

	{
		
		_ = pkg.Contains([]byte{'f','o','o','b','a','r'}, []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = pkg.Contains([]byte{'f','o','o','b','a','r'}, []byte("foobar")) 
	}

	{
		
		_ = pkg.Contains([]byte("foobar"), []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = pkg.Contains([]byte("foobar"), []byte("foobar")) // want `avoid allocations with strings\.Contains`
	}

	{
		
		_ = bytes.ContainsAny([]byte("foobar"), "f") // want `avoid allocations with strings\.ContainsAny`
	}

	{
		
		_ = bytes.ContainsAny([]byte{'f','o','o','b','a','r'}, "f") 
	}

	{
		
		_ = ContainsAny([]byte("foobar"), "f") // want `avoid allocations with strings\.ContainsAny`
	}

	{
		
		_ = ContainsAny([]byte{'f','o','o','b','a','r'}, "f") 
	}

	{
		
		_ = pkg.ContainsAny([]byte("foobar"), "f") // want `avoid allocations with strings\.ContainsAny`
	}

	{
		
		_ = pkg.ContainsAny([]byte{'f','o','o','b','a','r'}, "f") 
	}

	{
		
		_ = bytes.ContainsRune([]byte("foobar"), 'ф') // want `avoid allocations with strings\.ContainsRune`
	}

	{
		
		_ = bytes.ContainsRune([]byte{'f','o','o','b','a','r'}, 'ф') 
	}

	{
		
		_ = ContainsRune([]byte("foobar"), 'ф') // want `avoid allocations with strings\.ContainsRune`
	}

	{
		
		_ = ContainsRune([]byte{'f','o','o','b','a','r'}, 'ф') 
	}

	{
		
		_ = pkg.ContainsRune([]byte("foobar"), 'ф') // want `avoid allocations with strings\.ContainsRune`
	}

	{
		
		_ = pkg.ContainsRune([]byte{'f','o','o','b','a','r'}, 'ф') 
	}

	{
		
		_ = bytes.Count([]byte{'f','o','o','b','a','r'}, []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = bytes.Count([]byte{'f','o','o','b','a','r'}, []byte("foobar")) 
	}

	{
		
		_ = bytes.Count([]byte("foobar"), []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = bytes.Count([]byte("foobar"), []byte("foobar")) // want `avoid allocations with strings\.Count`
	}

	{
		
		_ = Count([]byte{'f','o','o','b','a','r'}, []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = Count([]byte{'f','o','o','b','a','r'}, []byte("foobar")) 
	}

	{
		
		_ = Count([]byte("foobar"), []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = Count([]byte("foobar"), []byte("foobar")) // want `avoid allocations with strings\.Count`
	}

	{
		
		_ = pkg.Count([]byte{'f','o','o','b','a','r'}, []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = pkg.Count([]byte{'f','o','o','b','a','r'}, []byte("foobar")) 
	}

	{
		
		_ = pkg.Count([]byte("foobar"), []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = pkg.Count([]byte("foobar"), []byte("foobar")) // want `avoid allocations with strings\.Count`
	}

	{
		
		_ = bytes.EqualFold([]byte{'f','o','o','b','a','r'}, []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = bytes.EqualFold([]byte{'f','o','o','b','a','r'}, []byte("foobar")) 
	}

	{
		
		_ = bytes.EqualFold([]byte("foobar"), []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = bytes.EqualFold([]byte("foobar"), []byte("foobar")) // want `avoid allocations with strings\.EqualFold`
	}

	{
		
		_ = EqualFold([]byte{'f','o','o','b','a','r'}, []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = EqualFold([]byte{'f','o','o','b','a','r'}, []byte("foobar")) 
	}

	{
		
		_ = EqualFold([]byte("foobar"), []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = EqualFold([]byte("foobar"), []byte("foobar")) // want `avoid allocations with strings\.EqualFold`
	}

	{
		
		_ = pkg.EqualFold([]byte{'f','o','o','b','a','r'}, []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = pkg.EqualFold([]byte{'f','o','o','b','a','r'}, []byte("foobar")) 
	}

	{
		
		_ = pkg.EqualFold([]byte("foobar"), []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = pkg.EqualFold([]byte("foobar"), []byte("foobar")) // want `avoid allocations with strings\.EqualFold`
	}

	{
		
		_ = bytes.HasPrefix([]byte{'f','o','o','b','a','r'}, []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = bytes.HasPrefix([]byte{'f','o','o','b','a','r'}, []byte("foobar")) 
	}

	{
		
		_ = bytes.HasPrefix([]byte("foobar"), []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = bytes.HasPrefix([]byte("foobar"), []byte("foobar")) // want `avoid allocations with strings\.HasPrefix`
	}

	{
		
		_ = HasPrefix([]byte{'f','o','o','b','a','r'}, []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = HasPrefix([]byte{'f','o','o','b','a','r'}, []byte("foobar")) 
	}

	{
		
		_ = HasPrefix([]byte("foobar"), []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = HasPrefix([]byte("foobar"), []byte("foobar")) // want `avoid allocations with strings\.HasPrefix`
	}

	{
		
		_ = pkg.HasPrefix([]byte{'f','o','o','b','a','r'}, []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = pkg.HasPrefix([]byte{'f','o','o','b','a','r'}, []byte("foobar")) 
	}

	{
		
		_ = pkg.HasPrefix([]byte("foobar"), []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = pkg.HasPrefix([]byte("foobar"), []byte("foobar")) // want `avoid allocations with strings\.HasPrefix`
	}

	{
		
		_ = bytes.HasSuffix([]byte{'f','o','o','b','a','r'}, []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = bytes.HasSuffix([]byte{'f','o','o','b','a','r'}, []byte("foobar")) 
	}

	{
		
		_ = bytes.HasSuffix([]byte("foobar"), []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = bytes.HasSuffix([]byte("foobar"), []byte("foobar")) // want `avoid allocations with strings\.HasSuffix`
	}

	{
		
		_ = HasSuffix([]byte{'f','o','o','b','a','r'}, []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = HasSuffix([]byte{'f','o','o','b','a','r'}, []byte("foobar")) 
	}

	{
		
		_ = HasSuffix([]byte("foobar"), []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = HasSuffix([]byte("foobar"), []byte("foobar")) // want `avoid allocations with strings\.HasSuffix`
	}

	{
		
		_ = pkg.HasSuffix([]byte{'f','o','o','b','a','r'}, []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = pkg.HasSuffix([]byte{'f','o','o','b','a','r'}, []byte("foobar")) 
	}

	{
		
		_ = pkg.HasSuffix([]byte("foobar"), []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = pkg.HasSuffix([]byte("foobar"), []byte("foobar")) // want `avoid allocations with strings\.HasSuffix`
	}

	{
		
		_ = bytes.Index([]byte{'f','o','o','b','a','r'}, []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = bytes.Index([]byte{'f','o','o','b','a','r'}, []byte("foobar")) 
	}

	{
		
		_ = bytes.Index([]byte("foobar"), []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = bytes.Index([]byte("foobar"), []byte("foobar")) // want `avoid allocations with strings\.Index`
	}

	{
		
		_ = Index([]byte{'f','o','o','b','a','r'}, []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = Index([]byte{'f','o','o','b','a','r'}, []byte("foobar")) 
	}

	{
		
		_ = Index([]byte("foobar"), []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = Index([]byte("foobar"), []byte("foobar")) // want `avoid allocations with strings\.Index`
	}

	{
		
		_ = pkg.Index([]byte{'f','o','o','b','a','r'}, []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = pkg.Index([]byte{'f','o','o','b','a','r'}, []byte("foobar")) 
	}

	{
		
		_ = pkg.Index([]byte("foobar"), []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = pkg.Index([]byte("foobar"), []byte("foobar")) // want `avoid allocations with strings\.Index`
	}

	{
		
		_ = bytes.IndexAny([]byte("foobar"), "f") // want `avoid allocations with strings\.IndexAny`
	}

	{
		
		_ = bytes.IndexAny([]byte{'f','o','o','b','a','r'}, "f") 
	}

	{
		
		_ = IndexAny([]byte("foobar"), "f") // want `avoid allocations with strings\.IndexAny`
	}

	{
		
		_ = IndexAny([]byte{'f','o','o','b','a','r'}, "f") 
	}

	{
		
		_ = pkg.IndexAny([]byte("foobar"), "f") // want `avoid allocations with strings\.IndexAny`
	}

	{
		
		_ = pkg.IndexAny([]byte{'f','o','o','b','a','r'}, "f") 
	}

	{
		
		_ = bytes.IndexByte([]byte("foobar"), 'f') // want `avoid allocations with strings\.IndexByte`
	}

	{
		
		_ = bytes.IndexByte([]byte{'f','o','o','b','a','r'}, 'f') 
	}

	{
		
		_ = IndexByte([]byte("foobar"), 'f') // want `avoid allocations with strings\.IndexByte`
	}

	{
		
		_ = IndexByte([]byte{'f','o','o','b','a','r'}, 'f') 
	}

	{
		
		_ = pkg.IndexByte([]byte("foobar"), 'f') // want `avoid allocations with strings\.IndexByte`
	}

	{
		
		_ = pkg.IndexByte([]byte{'f','o','o','b','a','r'}, 'f') 
	}

	{
		
		_ = bytes.IndexFunc([]byte("foobar"), func(rune) bool {return true }) // want `avoid allocations with strings\.IndexFunc`
	}

	{
		
		_ = bytes.IndexFunc([]byte{'f','o','o','b','a','r'}, func(rune) bool {return true }) 
	}

	{
		
		_ = IndexFunc([]byte("foobar"), func(rune) bool {return true }) // want `avoid allocations with strings\.IndexFunc`
	}

	{
		
		_ = IndexFunc([]byte{'f','o','o','b','a','r'}, func(rune) bool {return true }) 
	}

	{
		
		_ = pkg.IndexFunc([]byte("foobar"), func(rune) bool {return true }) // want `avoid allocations with strings\.IndexFunc`
	}

	{
		
		_ = pkg.IndexFunc([]byte{'f','o','o','b','a','r'}, func(rune) bool {return true }) 
	}

	{
		
		_ = bytes.IndexRune([]byte("foobar"), rune('ф')) // want `avoid allocations with strings\.IndexRune`
	}

	{
		
		_ = bytes.IndexRune([]byte{'f','o','o','b','a','r'}, rune('ф')) 
	}

	{
		
		_ = IndexRune([]byte("foobar"), rune('ф')) // want `avoid allocations with strings\.IndexRune`
	}

	{
		
		_ = IndexRune([]byte{'f','o','o','b','a','r'}, rune('ф')) 
	}

	{
		
		_ = pkg.IndexRune([]byte("foobar"), rune('ф')) // want `avoid allocations with strings\.IndexRune`
	}

	{
		
		_ = pkg.IndexRune([]byte{'f','o','o','b','a','r'}, rune('ф')) 
	}

	{
		
		_ = bytes.LastIndex([]byte{'f','o','o','b','a','r'}, []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = bytes.LastIndex([]byte{'f','o','o','b','a','r'}, []byte("foobar")) 
	}

	{
		
		_ = bytes.LastIndex([]byte("foobar"), []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = bytes.LastIndex([]byte("foobar"), []byte("foobar")) // want `avoid allocations with strings\.LastIndex`
	}

	{
		
		_ = LastIndex([]byte{'f','o','o','b','a','r'}, []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = LastIndex([]byte{'f','o','o','b','a','r'}, []byte("foobar")) 
	}

	{
		
		_ = LastIndex([]byte("foobar"), []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = LastIndex([]byte("foobar"), []byte("foobar")) // want `avoid allocations with strings\.LastIndex`
	}

	{
		
		_ = pkg.LastIndex([]byte{'f','o','o','b','a','r'}, []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = pkg.LastIndex([]byte{'f','o','o','b','a','r'}, []byte("foobar")) 
	}

	{
		
		_ = pkg.LastIndex([]byte("foobar"), []byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = pkg.LastIndex([]byte("foobar"), []byte("foobar")) // want `avoid allocations with strings\.LastIndex`
	}

	{
		
		_ = bytes.LastIndexAny([]byte("foobar"), "ф") // want `avoid allocations with strings\.LastIndexAny`
	}

	{
		
		_ = bytes.LastIndexAny([]byte{'f','o','o','b','a','r'}, "ф") 
	}

	{
		
		_ = LastIndexAny([]byte("foobar"), "ф") // want `avoid allocations with strings\.LastIndexAny`
	}

	{
		
		_ = LastIndexAny([]byte{'f','o','o','b','a','r'}, "ф") 
	}

	{
		
		_ = pkg.LastIndexAny([]byte("foobar"), "ф") // want `avoid allocations with strings\.LastIndexAny`
	}

	{
		
		_ = pkg.LastIndexAny([]byte{'f','o','o','b','a','r'}, "ф") 
	}

	{
		
		_ = bytes.LastIndexByte([]byte("foobar"), 'f') // want `avoid allocations with strings\.LastIndexByte`
	}

	{
		
		_ = bytes.LastIndexByte([]byte{'f','o','o','b','a','r'}, 'f') 
	}

	{
		
		_ = LastIndexByte([]byte("foobar"), 'f') // want `avoid allocations with strings\.LastIndexByte`
	}

	{
		
		_ = LastIndexByte([]byte{'f','o','o','b','a','r'}, 'f') 
	}

	{
		
		_ = pkg.LastIndexByte([]byte("foobar"), 'f') // want `avoid allocations with strings\.LastIndexByte`
	}

	{
		
		_ = pkg.LastIndexByte([]byte{'f','o','o','b','a','r'}, 'f') 
	}

	{
		
		_ = bytes.LastIndexFunc([]byte("foobar"), func(rune) bool {return true }) // want `avoid allocations with strings\.LastIndexFunc`
	}

	{
		
		_ = bytes.LastIndexFunc([]byte{'f','o','o','b','a','r'}, func(rune) bool {return true }) 
	}

	{
		
		_ = LastIndexFunc([]byte("foobar"), func(rune) bool {return true }) // want `avoid allocations with strings\.LastIndexFunc`
	}

	{
		
		_ = LastIndexFunc([]byte{'f','o','o','b','a','r'}, func(rune) bool {return true }) 
	}

	{
		
		_ = pkg.LastIndexFunc([]byte("foobar"), func(rune) bool {return true }) // want `avoid allocations with strings\.LastIndexFunc`
	}

	{
		
		_ = pkg.LastIndexFunc([]byte{'f','o','o','b','a','r'}, func(rune) bool {return true }) 
	}

	{
		
		_ = bytes.NewBuffer([]byte("foobar")) // want `avoid allocations with bytes\.NewBufferString`
	}

	{
		
		_ = bytes.NewBuffer([]byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = NewBuffer([]byte("foobar")) // want `avoid allocations with bytes\.NewBufferString`
	}

	{
		
		_ = NewBuffer([]byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = pkg.NewBuffer([]byte("foobar")) // want `avoid allocations with bytes\.NewBufferString`
	}

	{
		
		_ = pkg.NewBuffer([]byte{'f','o','o','b','a','r'}) 
	}

	{
		
		_ = bytes.NewBufferString(string([]byte{'f','o','o','b','a','r'})) // want `avoid allocations with bytes\.NewBuffer`
	}

	{
		
		_ = bytes.NewBufferString("foobar") 
	}

	{
		
		_ = NewBufferString(string([]byte{'f','o','o','b','a','r'})) // want `avoid allocations with bytes\.NewBuffer`
	}

	{
		
		_ = NewBufferString("foobar") 
	}

	{
		
		_ = pkg.NewBufferString(string([]byte{'f','o','o','b','a','r'})) // want `avoid allocations with bytes\.NewBuffer`
	}

	{
		
		_ = pkg.NewBufferString("foobar") 
	}

	{
		bb := bytes.Buffer{}
		_,_ = bb.Write([]byte("foobar")) // want `avoid allocations with \(\*bytes\.Buffer\)\.WriteString`
	}

	{
		bb := bytes.Buffer{}
		_,_ = bb.Write([]byte{'f','o','o','b','a','r'}) 
	}

	{
		bb := Buffer{}
		_,_ = bb.Write([]byte("foobar")) // want `avoid allocations with \(\*bytes\.Buffer\)\.WriteString`
	}

	{
		bb := Buffer{}
		_,_ = bb.Write([]byte{'f','o','o','b','a','r'}) 
	}

	{
		bb := pkg.Buffer{}
		_,_ = bb.Write([]byte("foobar")) // want `avoid allocations with \(\*bytes\.Buffer\)\.WriteString`
	}

	{
		bb := pkg.Buffer{}
		_,_ = bb.Write([]byte{'f','o','o','b','a','r'}) 
	}

	{
		bb := bytes.Buffer{}
		_,_ = bb.WriteString(string([]byte{'f','o','o','b','a','r'})) // want `avoid allocations with \(\*bytes\.Buffer\)\.Write`
	}

	{
		bb := bytes.Buffer{}
		_,_ = bb.WriteString("foobar") 
	}

	{
		bb := Buffer{}
		_,_ = bb.WriteString(string([]byte{'f','o','o','b','a','r'})) // want `avoid allocations with \(\*bytes\.Buffer\)\.Write`
	}

	{
		bb := Buffer{}
		_,_ = bb.WriteString("foobar") 
	}

	{
		bb := pkg.Buffer{}
		_,_ = bb.WriteString(string([]byte{'f','o','o','b','a','r'})) // want `avoid allocations with \(\*bytes\.Buffer\)\.Write`
	}

	{
		bb := pkg.Buffer{}
		_,_ = bb.WriteString("foobar") 
	}

}
