// Code generated by generate-tests; DO NOT EDIT.

package main

import (
	"os"
	. "os"
	pkg "os"
)


func main_os() {
	{
		f := &os.File{}
		_,_ = f.Write([]byte("foobar")) // want `avoid allocations with \(\*os\.File\)\.WriteString`
	}

	{
		f := &os.File{}
		_,_ = f.Write([]byte{'f','o','o','b','a','r'}) 
	}

	{
		f := &File{}
		_,_ = f.Write([]byte("foobar")) // want `avoid allocations with \(\*os\.File\)\.WriteString`
	}

	{
		f := &File{}
		_,_ = f.Write([]byte{'f','o','o','b','a','r'}) 
	}

	{
		f := &pkg.File{}
		_,_ = f.Write([]byte("foobar")) // want `avoid allocations with \(\*os\.File\)\.WriteString`
	}

	{
		f := &pkg.File{}
		_,_ = f.Write([]byte{'f','o','o','b','a','r'}) 
	}

	{
		f := &os.File{}
		_,_ = f.WriteString(string([]byte{'f','o','o','b','a','r'})) // want `avoid allocations with \(\*os\.File\)\.Write`
	}

	{
		f := &os.File{}
		_,_ = f.WriteString("foobar") 
	}

	{
		f := &File{}
		_,_ = f.WriteString(string([]byte{'f','o','o','b','a','r'})) // want `avoid allocations with \(\*os\.File\)\.Write`
	}

	{
		f := &File{}
		_,_ = f.WriteString("foobar") 
	}

	{
		f := &pkg.File{}
		_,_ = f.WriteString(string([]byte{'f','o','o','b','a','r'})) // want `avoid allocations with \(\*os\.File\)\.Write`
	}

	{
		f := &pkg.File{}
		_,_ = f.WriteString("foobar") 
	}

}
