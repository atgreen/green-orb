// Code generated by generate-tests; DO NOT EDIT.

package main

import (
	"hash/maphash"
	. "hash/maphash"
	pkg "hash/maphash"
)


func main_maphash() {
	{
		h := maphash.Hash{}
		_,_ = h.Write([]byte("foobar")) // want `avoid allocations with \(\*maphash\.Hash\)\.WriteString`
	}

	{
		h := maphash.Hash{}
		_,_ = h.Write([]byte{'f','o','o','b','a','r'}) 
	}

	{
		h := Hash{}
		_,_ = h.Write([]byte("foobar")) // want `avoid allocations with \(\*maphash\.Hash\)\.WriteString`
	}

	{
		h := Hash{}
		_,_ = h.Write([]byte{'f','o','o','b','a','r'}) 
	}

	{
		h := pkg.Hash{}
		_,_ = h.Write([]byte("foobar")) // want `avoid allocations with \(\*maphash\.Hash\)\.WriteString`
	}

	{
		h := pkg.Hash{}
		_,_ = h.Write([]byte{'f','o','o','b','a','r'}) 
	}

	{
		h := maphash.Hash{}
		_,_ = h.WriteString(string([]byte{'f','o','o','b','a','r'})) // want `avoid allocations with \(\*maphash\.Hash\)\.Write`
	}

	{
		h := maphash.Hash{}
		_,_ = h.WriteString("foobar") 
	}

	{
		h := Hash{}
		_,_ = h.WriteString(string([]byte{'f','o','o','b','a','r'})) // want `avoid allocations with \(\*maphash\.Hash\)\.Write`
	}

	{
		h := Hash{}
		_,_ = h.WriteString("foobar") 
	}

	{
		h := pkg.Hash{}
		_,_ = h.WriteString(string([]byte{'f','o','o','b','a','r'})) // want `avoid allocations with \(\*maphash\.Hash\)\.Write`
	}

	{
		h := pkg.Hash{}
		_,_ = h.WriteString("foobar") 
	}

}
