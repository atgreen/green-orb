name: Build Release

on:
  # Called by other workflows with inputs for build type and dry-run mode
  workflow_call:
    inputs:
      build-type:
        description: "Type of build (prod or dev)"
        required: true
        type: string
      dry-run:
        description: "Run in test mode without publishing artifacts"
        required: false
        default: false
        type: boolean
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true

jobs:
  # Build binaries, images, SBOMs, and attestations for production or development
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write # For code checkout and publishing releases
      packages: write # For pushing images to registries
      attestations: write # For generating provenance and SBOMs
      id-token: write # For OIDC auth to Docker Hub and GHCR
    steps:
      - name: Validate build-type input # Ensure build-type is 'prod' or 'dev'.
        run: |
          if [[ "${{ inputs.build-type }}" != "prod" && "${{ inputs.build-type }}" != "dev" ]]; then
            echo "Error: build-type must be 'prod' or 'dev', got '${{ inputs.build-type }}'"
            exit 1
          fi

      - name: Checkout code
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493
        with:
          fetch-depth: 0 # Full history for GoReleaser versioning.

      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00
        with:
          go-version: 1.25.x

      - name: Set up QEMU # Enable multi-platform emulation.
        uses: docker/setup-qemu-action@05340d1c670183e7caabdb33ae9f1c80fae3b0c2
        with:
          platforms: linux/amd64,linux/386,linux/arm/v6,linux/arm64/v8,linux/riscv64

      - name: Set up Docker Buildx # Configure multi-platform builds.
        uses: docker/setup-buildx-action@1583c0f09d26c58c59d25b0eef29792b7ce99d9a
        with:
          driver: docker-container
          platforms: linux/amd64,linux/386,linux/arm/v6,linux/arm64/v8,linux/riscv64
          use: true

      - name: Enable containerd snapshotter # Enable containerd for multi-platform builds
        run: |
          sudo bash -c 'echo "{\"features\": {\"containerd-snapshotter\": true}}" > /etc/docker/daemon.json'
          sudo systemctl restart docker

      - name: Install Syft for SBOM generation # Install Syft for GoReleaser SBOM generation
        if: ${{ inputs.build-type == 'prod' }}
        run: curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Login to Docker Hub # Authenticate to Docker Hub
        if: ${{ !inputs.dry-run }}
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GHCR # Authenticate to GHCR
        if: ${{ !inputs.dry-run }}
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@a08664b80c0ab417b1babcbf750274aed2018fef
        with:
          distribution: goreleaser
          version: "~> v2"
          # prod (full release), dev (snapshot), skip publish in dry-run
          # https://goreleaser.com/cmd/goreleaser_release/
          # Execute GoReleaser release process
          # Use prod.yml or dev.yml based on build-type
          # Generate snapshot versions for dev builds
          # Remove dist directory before building
          # Skip publishing during dry-run
          args: release --config build/goreleaser/${{ inputs.build-type }}.yaml ${{ inputs.build-type == 'dev' && '--snapshot' || '' }} --clean ${{ inputs.dry-run && '--skip=publish' || '' }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
          DRY_RUN: ${{ inputs.dry-run }}

      - name: Upload binary SBOMs # Upload SBOMs for prod builds.
        if: ${{ !inputs.dry-run && inputs.build-type == 'prod' }}
        uses: actions/upload-artifact@de65e23aa2b7e23d713bb51fbfcb6d502f8667d8
        with:
          name: ${{ inputs.build-type }}-binary-sboms
          path: dist/*.sbom
          if-no-files-found: warn

      - name: Generate artifact attestation # Generate attestations for prod builds.
        if: ${{ !inputs.dry-run && inputs.build-type == 'prod' }}
        uses: actions/attest-build-provenance@0b6e9809265278d02c58acf52849a95818a5a306
        with:
          subject-checksums: ./dist/checksums.txt

      - name: Clean up dist directory # Remove dist directory to avoid leftover artifacts.
        if: always()
        run: rm -rf dist
