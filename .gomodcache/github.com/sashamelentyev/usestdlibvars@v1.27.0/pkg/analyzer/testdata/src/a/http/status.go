// Code generated by usestdlibvars, DO NOT EDIT.

package http_test

import (
	"net/http"
	"net/http/httptest"
)

var (
	_ = 100
	_ = 101
	_ = 102
	_ = 103
	_ = 200
	_ = 201
	_ = 202
	_ = 203
	_ = 204
	_ = 205
	_ = 206
	_ = 207
	_ = 208
	_ = 226
	_ = 300
	_ = 301
	_ = 302
	_ = 303
	_ = 304
	_ = 305
	_ = 307
	_ = 308
	_ = 400
	_ = 401
	_ = 402
	_ = 403
	_ = 404
	_ = 405
	_ = 406
	_ = 407
	_ = 408
	_ = 409
	_ = 410
	_ = 411
	_ = 412
	_ = 413
	_ = 414
	_ = 415
	_ = 416
	_ = 417
	_ = 418
	_ = 421
	_ = 422
	_ = 423
	_ = 424
	_ = 425
	_ = 426
	_ = 428
	_ = 429
	_ = 431
	_ = 451
	_ = 500
	_ = 501
	_ = 502
	_ = 503
	_ = 504
	_ = 505
	_ = 506
	_ = 507
	_ = 508
	_ = 510
	_ = 511
)

const (
	_ = 100
	_ = 101
	_ = 102
	_ = 103
	_ = 200
	_ = 201
	_ = 202
	_ = 203
	_ = 204
	_ = 205
	_ = 206
	_ = 207
	_ = 208
	_ = 226
	_ = 300
	_ = 301
	_ = 302
	_ = 303
	_ = 304
	_ = 305
	_ = 307
	_ = 308
	_ = 400
	_ = 401
	_ = 402
	_ = 403
	_ = 404
	_ = 405
	_ = 406
	_ = 407
	_ = 408
	_ = 409
	_ = 410
	_ = 411
	_ = 412
	_ = 413
	_ = 414
	_ = 415
	_ = 416
	_ = 417
	_ = 418
	_ = 421
	_ = 422
	_ = 423
	_ = 424
	_ = 425
	_ = 426
	_ = 428
	_ = 429
	_ = 431
	_ = 451
	_ = 500
	_ = 501
	_ = 502
	_ = 503
	_ = 504
	_ = 505
	_ = 506
	_ = 507
	_ = 508
	_ = 510
	_ = 511
)

func _() {
	var w http.ResponseWriter
	w.WriteHeader(100) // want `"100" can be replaced by http\.StatusContinue`
	w.WriteHeader(101) // want `"101" can be replaced by http\.StatusSwitchingProtocols`
	w.WriteHeader(102) // want `"102" can be replaced by http\.StatusProcessing`
	w.WriteHeader(103) // want `"103" can be replaced by http\.StatusEarlyHints`
	w.WriteHeader(200) // want `"200" can be replaced by http\.StatusOK`
	w.WriteHeader(201) // want `"201" can be replaced by http\.StatusCreated`
	w.WriteHeader(202) // want `"202" can be replaced by http\.StatusAccepted`
	w.WriteHeader(203) // want `"203" can be replaced by http\.StatusNonAuthoritativeInfo`
	w.WriteHeader(204) // want `"204" can be replaced by http\.StatusNoContent`
	w.WriteHeader(205) // want `"205" can be replaced by http\.StatusResetContent`
	w.WriteHeader(206) // want `"206" can be replaced by http\.StatusPartialContent`
	w.WriteHeader(207) // want `"207" can be replaced by http\.StatusMultiStatus`
	w.WriteHeader(208) // want `"208" can be replaced by http\.StatusAlreadyReported`
	w.WriteHeader(226) // want `"226" can be replaced by http\.StatusIMUsed`
	w.WriteHeader(300) // want `"300" can be replaced by http\.StatusMultipleChoices`
	w.WriteHeader(301) // want `"301" can be replaced by http\.StatusMovedPermanently`
	w.WriteHeader(302) // want `"302" can be replaced by http\.StatusFound`
	w.WriteHeader(303) // want `"303" can be replaced by http\.StatusSeeOther`
	w.WriteHeader(304) // want `"304" can be replaced by http\.StatusNotModified`
	w.WriteHeader(305) // want `"305" can be replaced by http\.StatusUseProxy`
	w.WriteHeader(307) // want `"307" can be replaced by http\.StatusTemporaryRedirect`
	w.WriteHeader(308) // want `"308" can be replaced by http\.StatusPermanentRedirect`
	w.WriteHeader(400) // want `"400" can be replaced by http\.StatusBadRequest`
	w.WriteHeader(401) // want `"401" can be replaced by http\.StatusUnauthorized`
	w.WriteHeader(402) // want `"402" can be replaced by http\.StatusPaymentRequired`
	w.WriteHeader(403) // want `"403" can be replaced by http\.StatusForbidden`
	w.WriteHeader(404) // want `"404" can be replaced by http\.StatusNotFound`
	w.WriteHeader(405) // want `"405" can be replaced by http\.StatusMethodNotAllowed`
	w.WriteHeader(406) // want `"406" can be replaced by http\.StatusNotAcceptable`
	w.WriteHeader(407) // want `"407" can be replaced by http\.StatusProxyAuthRequired`
	w.WriteHeader(408) // want `"408" can be replaced by http\.StatusRequestTimeout`
	w.WriteHeader(409) // want `"409" can be replaced by http\.StatusConflict`
	w.WriteHeader(410) // want `"410" can be replaced by http\.StatusGone`
	w.WriteHeader(411) // want `"411" can be replaced by http\.StatusLengthRequired`
	w.WriteHeader(412) // want `"412" can be replaced by http\.StatusPreconditionFailed`
	w.WriteHeader(413) // want `"413" can be replaced by http\.StatusRequestEntityTooLarge`
	w.WriteHeader(414) // want `"414" can be replaced by http\.StatusRequestURITooLong`
	w.WriteHeader(415) // want `"415" can be replaced by http\.StatusUnsupportedMediaType`
	w.WriteHeader(416) // want `"416" can be replaced by http\.StatusRequestedRangeNotSatisfiable`
	w.WriteHeader(417) // want `"417" can be replaced by http\.StatusExpectationFailed`
	w.WriteHeader(418) // want `"418" can be replaced by http\.StatusTeapot`
	w.WriteHeader(421) // want `"421" can be replaced by http\.StatusMisdirectedRequest`
	w.WriteHeader(422) // want `"422" can be replaced by http\.StatusUnprocessableEntity`
	w.WriteHeader(423) // want `"423" can be replaced by http\.StatusLocked`
	w.WriteHeader(424) // want `"424" can be replaced by http\.StatusFailedDependency`
	w.WriteHeader(425) // want `"425" can be replaced by http\.StatusTooEarly`
	w.WriteHeader(426) // want `"426" can be replaced by http\.StatusUpgradeRequired`
	w.WriteHeader(428) // want `"428" can be replaced by http\.StatusPreconditionRequired`
	w.WriteHeader(429) // want `"429" can be replaced by http\.StatusTooManyRequests`
	w.WriteHeader(431) // want `"431" can be replaced by http\.StatusRequestHeaderFieldsTooLarge`
	w.WriteHeader(451) // want `"451" can be replaced by http\.StatusUnavailableForLegalReasons`
	w.WriteHeader(500) // want `"500" can be replaced by http\.StatusInternalServerError`
	w.WriteHeader(501) // want `"501" can be replaced by http\.StatusNotImplemented`
	w.WriteHeader(502) // want `"502" can be replaced by http\.StatusBadGateway`
	w.WriteHeader(503) // want `"503" can be replaced by http\.StatusServiceUnavailable`
	w.WriteHeader(504) // want `"504" can be replaced by http\.StatusGatewayTimeout`
	w.WriteHeader(505) // want `"505" can be replaced by http\.StatusHTTPVersionNotSupported`
	w.WriteHeader(506) // want `"506" can be replaced by http\.StatusVariantAlsoNegotiates`
	w.WriteHeader(507) // want `"507" can be replaced by http\.StatusInsufficientStorage`
	w.WriteHeader(508) // want `"508" can be replaced by http\.StatusLoopDetected`
	w.WriteHeader(510) // want `"510" can be replaced by http\.StatusNotExtended`
	w.WriteHeader(511) // want `"511" can be replaced by http\.StatusNetworkAuthenticationRequired`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(http.StatusContinue)
	w.WriteHeader(http.StatusSwitchingProtocols)
	w.WriteHeader(http.StatusProcessing)
	w.WriteHeader(http.StatusEarlyHints)
	w.WriteHeader(http.StatusOK)
	w.WriteHeader(http.StatusCreated)
	w.WriteHeader(http.StatusAccepted)
	w.WriteHeader(http.StatusNonAuthoritativeInfo)
	w.WriteHeader(http.StatusNoContent)
	w.WriteHeader(http.StatusResetContent)
	w.WriteHeader(http.StatusPartialContent)
	w.WriteHeader(http.StatusMultiStatus)
	w.WriteHeader(http.StatusAlreadyReported)
	w.WriteHeader(http.StatusIMUsed)
	w.WriteHeader(http.StatusMultipleChoices)
	w.WriteHeader(http.StatusMovedPermanently)
	w.WriteHeader(http.StatusFound)
	w.WriteHeader(http.StatusSeeOther)
	w.WriteHeader(http.StatusNotModified)
	w.WriteHeader(http.StatusUseProxy)
	w.WriteHeader(http.StatusTemporaryRedirect)
	w.WriteHeader(http.StatusPermanentRedirect)
	w.WriteHeader(http.StatusBadRequest)
	w.WriteHeader(http.StatusUnauthorized)
	w.WriteHeader(http.StatusPaymentRequired)
	w.WriteHeader(http.StatusForbidden)
	w.WriteHeader(http.StatusNotFound)
	w.WriteHeader(http.StatusMethodNotAllowed)
	w.WriteHeader(http.StatusNotAcceptable)
	w.WriteHeader(http.StatusProxyAuthRequired)
	w.WriteHeader(http.StatusRequestTimeout)
	w.WriteHeader(http.StatusConflict)
	w.WriteHeader(http.StatusGone)
	w.WriteHeader(http.StatusLengthRequired)
	w.WriteHeader(http.StatusPreconditionFailed)
	w.WriteHeader(http.StatusRequestEntityTooLarge)
	w.WriteHeader(http.StatusRequestURITooLong)
	w.WriteHeader(http.StatusUnsupportedMediaType)
	w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	w.WriteHeader(http.StatusExpectationFailed)
	w.WriteHeader(http.StatusTeapot)
	w.WriteHeader(http.StatusMisdirectedRequest)
	w.WriteHeader(http.StatusUnprocessableEntity)
	w.WriteHeader(http.StatusLocked)
	w.WriteHeader(http.StatusFailedDependency)
	w.WriteHeader(http.StatusTooEarly)
	w.WriteHeader(http.StatusUpgradeRequired)
	w.WriteHeader(http.StatusPreconditionRequired)
	w.WriteHeader(http.StatusTooManyRequests)
	w.WriteHeader(http.StatusRequestHeaderFieldsTooLarge)
	w.WriteHeader(http.StatusUnavailableForLegalReasons)
	w.WriteHeader(http.StatusInternalServerError)
	w.WriteHeader(http.StatusNotImplemented)
	w.WriteHeader(http.StatusBadGateway)
	w.WriteHeader(http.StatusServiceUnavailable)
	w.WriteHeader(http.StatusGatewayTimeout)
	w.WriteHeader(http.StatusHTTPVersionNotSupported)
	w.WriteHeader(http.StatusVariantAlsoNegotiates)
	w.WriteHeader(http.StatusInsufficientStorage)
	w.WriteHeader(http.StatusLoopDetected)
	w.WriteHeader(http.StatusNotExtended)
	w.WriteHeader(http.StatusNetworkAuthenticationRequired)
}

var (
	_ = http.Response{StatusCode: 100} // want `"100" can be replaced by http\.StatusContinue`
	_ = http.Response{StatusCode: 101} // want `"101" can be replaced by http\.StatusSwitchingProtocols`
	_ = http.Response{StatusCode: 102} // want `"102" can be replaced by http\.StatusProcessing`
	_ = http.Response{StatusCode: 103} // want `"103" can be replaced by http\.StatusEarlyHints`
	_ = http.Response{StatusCode: 200} // want `"200" can be replaced by http\.StatusOK`
	_ = http.Response{StatusCode: 201} // want `"201" can be replaced by http\.StatusCreated`
	_ = http.Response{StatusCode: 202} // want `"202" can be replaced by http\.StatusAccepted`
	_ = http.Response{StatusCode: 203} // want `"203" can be replaced by http\.StatusNonAuthoritativeInfo`
	_ = http.Response{StatusCode: 204} // want `"204" can be replaced by http\.StatusNoContent`
	_ = http.Response{StatusCode: 205} // want `"205" can be replaced by http\.StatusResetContent`
	_ = http.Response{StatusCode: 206} // want `"206" can be replaced by http\.StatusPartialContent`
	_ = http.Response{StatusCode: 207} // want `"207" can be replaced by http\.StatusMultiStatus`
	_ = http.Response{StatusCode: 208} // want `"208" can be replaced by http\.StatusAlreadyReported`
	_ = http.Response{StatusCode: 226} // want `"226" can be replaced by http\.StatusIMUsed`
	_ = http.Response{StatusCode: 300} // want `"300" can be replaced by http\.StatusMultipleChoices`
	_ = http.Response{StatusCode: 301} // want `"301" can be replaced by http\.StatusMovedPermanently`
	_ = http.Response{StatusCode: 302} // want `"302" can be replaced by http\.StatusFound`
	_ = http.Response{StatusCode: 303} // want `"303" can be replaced by http\.StatusSeeOther`
	_ = http.Response{StatusCode: 304} // want `"304" can be replaced by http\.StatusNotModified`
	_ = http.Response{StatusCode: 305} // want `"305" can be replaced by http\.StatusUseProxy`
	_ = http.Response{StatusCode: 307} // want `"307" can be replaced by http\.StatusTemporaryRedirect`
	_ = http.Response{StatusCode: 308} // want `"308" can be replaced by http\.StatusPermanentRedirect`
	_ = http.Response{StatusCode: 400} // want `"400" can be replaced by http\.StatusBadRequest`
	_ = http.Response{StatusCode: 401} // want `"401" can be replaced by http\.StatusUnauthorized`
	_ = http.Response{StatusCode: 402} // want `"402" can be replaced by http\.StatusPaymentRequired`
	_ = http.Response{StatusCode: 403} // want `"403" can be replaced by http\.StatusForbidden`
	_ = http.Response{StatusCode: 404} // want `"404" can be replaced by http\.StatusNotFound`
	_ = http.Response{StatusCode: 405} // want `"405" can be replaced by http\.StatusMethodNotAllowed`
	_ = http.Response{StatusCode: 406} // want `"406" can be replaced by http\.StatusNotAcceptable`
	_ = http.Response{StatusCode: 407} // want `"407" can be replaced by http\.StatusProxyAuthRequired`
	_ = http.Response{StatusCode: 408} // want `"408" can be replaced by http\.StatusRequestTimeout`
	_ = http.Response{StatusCode: 409} // want `"409" can be replaced by http\.StatusConflict`
	_ = http.Response{StatusCode: 410} // want `"410" can be replaced by http\.StatusGone`
	_ = http.Response{StatusCode: 411} // want `"411" can be replaced by http\.StatusLengthRequired`
	_ = http.Response{StatusCode: 412} // want `"412" can be replaced by http\.StatusPreconditionFailed`
	_ = http.Response{StatusCode: 413} // want `"413" can be replaced by http\.StatusRequestEntityTooLarge`
	_ = http.Response{StatusCode: 414} // want `"414" can be replaced by http\.StatusRequestURITooLong`
	_ = http.Response{StatusCode: 415} // want `"415" can be replaced by http\.StatusUnsupportedMediaType`
	_ = http.Response{StatusCode: 416} // want `"416" can be replaced by http\.StatusRequestedRangeNotSatisfiable`
	_ = http.Response{StatusCode: 417} // want `"417" can be replaced by http\.StatusExpectationFailed`
	_ = http.Response{StatusCode: 418} // want `"418" can be replaced by http\.StatusTeapot`
	_ = http.Response{StatusCode: 421} // want `"421" can be replaced by http\.StatusMisdirectedRequest`
	_ = http.Response{StatusCode: 422} // want `"422" can be replaced by http\.StatusUnprocessableEntity`
	_ = http.Response{StatusCode: 423} // want `"423" can be replaced by http\.StatusLocked`
	_ = http.Response{StatusCode: 424} // want `"424" can be replaced by http\.StatusFailedDependency`
	_ = http.Response{StatusCode: 425} // want `"425" can be replaced by http\.StatusTooEarly`
	_ = http.Response{StatusCode: 426} // want `"426" can be replaced by http\.StatusUpgradeRequired`
	_ = http.Response{StatusCode: 428} // want `"428" can be replaced by http\.StatusPreconditionRequired`
	_ = http.Response{StatusCode: 429} // want `"429" can be replaced by http\.StatusTooManyRequests`
	_ = http.Response{StatusCode: 431} // want `"431" can be replaced by http\.StatusRequestHeaderFieldsTooLarge`
	_ = http.Response{StatusCode: 451} // want `"451" can be replaced by http\.StatusUnavailableForLegalReasons`
	_ = http.Response{StatusCode: 500} // want `"500" can be replaced by http\.StatusInternalServerError`
	_ = http.Response{StatusCode: 501} // want `"501" can be replaced by http\.StatusNotImplemented`
	_ = http.Response{StatusCode: 502} // want `"502" can be replaced by http\.StatusBadGateway`
	_ = http.Response{StatusCode: 503} // want `"503" can be replaced by http\.StatusServiceUnavailable`
	_ = http.Response{StatusCode: 504} // want `"504" can be replaced by http\.StatusGatewayTimeout`
	_ = http.Response{StatusCode: 505} // want `"505" can be replaced by http\.StatusHTTPVersionNotSupported`
	_ = http.Response{StatusCode: 506} // want `"506" can be replaced by http\.StatusVariantAlsoNegotiates`
	_ = http.Response{StatusCode: 507} // want `"507" can be replaced by http\.StatusInsufficientStorage`
	_ = http.Response{StatusCode: 508} // want `"508" can be replaced by http\.StatusLoopDetected`
	_ = http.Response{StatusCode: 510} // want `"510" can be replaced by http\.StatusNotExtended`
	_ = http.Response{StatusCode: 511} // want `"511" can be replaced by http\.StatusNetworkAuthenticationRequired`
)

var (
	_ = http.Response{StatusCode: http.StatusContinue}
	_ = http.Response{StatusCode: http.StatusSwitchingProtocols}
	_ = http.Response{StatusCode: http.StatusProcessing}
	_ = http.Response{StatusCode: http.StatusEarlyHints}
	_ = http.Response{StatusCode: http.StatusOK}
	_ = http.Response{StatusCode: http.StatusCreated}
	_ = http.Response{StatusCode: http.StatusAccepted}
	_ = http.Response{StatusCode: http.StatusNonAuthoritativeInfo}
	_ = http.Response{StatusCode: http.StatusNoContent}
	_ = http.Response{StatusCode: http.StatusResetContent}
	_ = http.Response{StatusCode: http.StatusPartialContent}
	_ = http.Response{StatusCode: http.StatusMultiStatus}
	_ = http.Response{StatusCode: http.StatusAlreadyReported}
	_ = http.Response{StatusCode: http.StatusIMUsed}
	_ = http.Response{StatusCode: http.StatusMultipleChoices}
	_ = http.Response{StatusCode: http.StatusMovedPermanently}
	_ = http.Response{StatusCode: http.StatusFound}
	_ = http.Response{StatusCode: http.StatusSeeOther}
	_ = http.Response{StatusCode: http.StatusNotModified}
	_ = http.Response{StatusCode: http.StatusUseProxy}
	_ = http.Response{StatusCode: http.StatusTemporaryRedirect}
	_ = http.Response{StatusCode: http.StatusPermanentRedirect}
	_ = http.Response{StatusCode: http.StatusBadRequest}
	_ = http.Response{StatusCode: http.StatusUnauthorized}
	_ = http.Response{StatusCode: http.StatusPaymentRequired}
	_ = http.Response{StatusCode: http.StatusForbidden}
	_ = http.Response{StatusCode: http.StatusNotFound}
	_ = http.Response{StatusCode: http.StatusMethodNotAllowed}
	_ = http.Response{StatusCode: http.StatusNotAcceptable}
	_ = http.Response{StatusCode: http.StatusProxyAuthRequired}
	_ = http.Response{StatusCode: http.StatusRequestTimeout}
	_ = http.Response{StatusCode: http.StatusConflict}
	_ = http.Response{StatusCode: http.StatusGone}
	_ = http.Response{StatusCode: http.StatusLengthRequired}
	_ = http.Response{StatusCode: http.StatusPreconditionFailed}
	_ = http.Response{StatusCode: http.StatusRequestEntityTooLarge}
	_ = http.Response{StatusCode: http.StatusRequestURITooLong}
	_ = http.Response{StatusCode: http.StatusUnsupportedMediaType}
	_ = http.Response{StatusCode: http.StatusRequestedRangeNotSatisfiable}
	_ = http.Response{StatusCode: http.StatusExpectationFailed}
	_ = http.Response{StatusCode: http.StatusTeapot}
	_ = http.Response{StatusCode: http.StatusMisdirectedRequest}
	_ = http.Response{StatusCode: http.StatusUnprocessableEntity}
	_ = http.Response{StatusCode: http.StatusLocked}
	_ = http.Response{StatusCode: http.StatusFailedDependency}
	_ = http.Response{StatusCode: http.StatusTooEarly}
	_ = http.Response{StatusCode: http.StatusUpgradeRequired}
	_ = http.Response{StatusCode: http.StatusPreconditionRequired}
	_ = http.Response{StatusCode: http.StatusTooManyRequests}
	_ = http.Response{StatusCode: http.StatusRequestHeaderFieldsTooLarge}
	_ = http.Response{StatusCode: http.StatusUnavailableForLegalReasons}
	_ = http.Response{StatusCode: http.StatusInternalServerError}
	_ = http.Response{StatusCode: http.StatusNotImplemented}
	_ = http.Response{StatusCode: http.StatusBadGateway}
	_ = http.Response{StatusCode: http.StatusServiceUnavailable}
	_ = http.Response{StatusCode: http.StatusGatewayTimeout}
	_ = http.Response{StatusCode: http.StatusHTTPVersionNotSupported}
	_ = http.Response{StatusCode: http.StatusVariantAlsoNegotiates}
	_ = http.Response{StatusCode: http.StatusInsufficientStorage}
	_ = http.Response{StatusCode: http.StatusLoopDetected}
	_ = http.Response{StatusCode: http.StatusNotExtended}
	_ = http.Response{StatusCode: http.StatusNetworkAuthenticationRequired}
)

var (
	_ = &http.Response{StatusCode: 100} // want `"100" can be replaced by http\.StatusContinue`
	_ = &http.Response{StatusCode: 101} // want `"101" can be replaced by http\.StatusSwitchingProtocols`
	_ = &http.Response{StatusCode: 102} // want `"102" can be replaced by http\.StatusProcessing`
	_ = &http.Response{StatusCode: 103} // want `"103" can be replaced by http\.StatusEarlyHints`
	_ = &http.Response{StatusCode: 200} // want `"200" can be replaced by http\.StatusOK`
	_ = &http.Response{StatusCode: 201} // want `"201" can be replaced by http\.StatusCreated`
	_ = &http.Response{StatusCode: 202} // want `"202" can be replaced by http\.StatusAccepted`
	_ = &http.Response{StatusCode: 203} // want `"203" can be replaced by http\.StatusNonAuthoritativeInfo`
	_ = &http.Response{StatusCode: 204} // want `"204" can be replaced by http\.StatusNoContent`
	_ = &http.Response{StatusCode: 205} // want `"205" can be replaced by http\.StatusResetContent`
	_ = &http.Response{StatusCode: 206} // want `"206" can be replaced by http\.StatusPartialContent`
	_ = &http.Response{StatusCode: 207} // want `"207" can be replaced by http\.StatusMultiStatus`
	_ = &http.Response{StatusCode: 208} // want `"208" can be replaced by http\.StatusAlreadyReported`
	_ = &http.Response{StatusCode: 226} // want `"226" can be replaced by http\.StatusIMUsed`
	_ = &http.Response{StatusCode: 300} // want `"300" can be replaced by http\.StatusMultipleChoices`
	_ = &http.Response{StatusCode: 301} // want `"301" can be replaced by http\.StatusMovedPermanently`
	_ = &http.Response{StatusCode: 302} // want `"302" can be replaced by http\.StatusFound`
	_ = &http.Response{StatusCode: 303} // want `"303" can be replaced by http\.StatusSeeOther`
	_ = &http.Response{StatusCode: 304} // want `"304" can be replaced by http\.StatusNotModified`
	_ = &http.Response{StatusCode: 305} // want `"305" can be replaced by http\.StatusUseProxy`
	_ = &http.Response{StatusCode: 307} // want `"307" can be replaced by http\.StatusTemporaryRedirect`
	_ = &http.Response{StatusCode: 308} // want `"308" can be replaced by http\.StatusPermanentRedirect`
	_ = &http.Response{StatusCode: 400} // want `"400" can be replaced by http\.StatusBadRequest`
	_ = &http.Response{StatusCode: 401} // want `"401" can be replaced by http\.StatusUnauthorized`
	_ = &http.Response{StatusCode: 402} // want `"402" can be replaced by http\.StatusPaymentRequired`
	_ = &http.Response{StatusCode: 403} // want `"403" can be replaced by http\.StatusForbidden`
	_ = &http.Response{StatusCode: 404} // want `"404" can be replaced by http\.StatusNotFound`
	_ = &http.Response{StatusCode: 405} // want `"405" can be replaced by http\.StatusMethodNotAllowed`
	_ = &http.Response{StatusCode: 406} // want `"406" can be replaced by http\.StatusNotAcceptable`
	_ = &http.Response{StatusCode: 407} // want `"407" can be replaced by http\.StatusProxyAuthRequired`
	_ = &http.Response{StatusCode: 408} // want `"408" can be replaced by http\.StatusRequestTimeout`
	_ = &http.Response{StatusCode: 409} // want `"409" can be replaced by http\.StatusConflict`
	_ = &http.Response{StatusCode: 410} // want `"410" can be replaced by http\.StatusGone`
	_ = &http.Response{StatusCode: 411} // want `"411" can be replaced by http\.StatusLengthRequired`
	_ = &http.Response{StatusCode: 412} // want `"412" can be replaced by http\.StatusPreconditionFailed`
	_ = &http.Response{StatusCode: 413} // want `"413" can be replaced by http\.StatusRequestEntityTooLarge`
	_ = &http.Response{StatusCode: 414} // want `"414" can be replaced by http\.StatusRequestURITooLong`
	_ = &http.Response{StatusCode: 415} // want `"415" can be replaced by http\.StatusUnsupportedMediaType`
	_ = &http.Response{StatusCode: 416} // want `"416" can be replaced by http\.StatusRequestedRangeNotSatisfiable`
	_ = &http.Response{StatusCode: 417} // want `"417" can be replaced by http\.StatusExpectationFailed`
	_ = &http.Response{StatusCode: 418} // want `"418" can be replaced by http\.StatusTeapot`
	_ = &http.Response{StatusCode: 421} // want `"421" can be replaced by http\.StatusMisdirectedRequest`
	_ = &http.Response{StatusCode: 422} // want `"422" can be replaced by http\.StatusUnprocessableEntity`
	_ = &http.Response{StatusCode: 423} // want `"423" can be replaced by http\.StatusLocked`
	_ = &http.Response{StatusCode: 424} // want `"424" can be replaced by http\.StatusFailedDependency`
	_ = &http.Response{StatusCode: 425} // want `"425" can be replaced by http\.StatusTooEarly`
	_ = &http.Response{StatusCode: 426} // want `"426" can be replaced by http\.StatusUpgradeRequired`
	_ = &http.Response{StatusCode: 428} // want `"428" can be replaced by http\.StatusPreconditionRequired`
	_ = &http.Response{StatusCode: 429} // want `"429" can be replaced by http\.StatusTooManyRequests`
	_ = &http.Response{StatusCode: 431} // want `"431" can be replaced by http\.StatusRequestHeaderFieldsTooLarge`
	_ = &http.Response{StatusCode: 451} // want `"451" can be replaced by http\.StatusUnavailableForLegalReasons`
	_ = &http.Response{StatusCode: 500} // want `"500" can be replaced by http\.StatusInternalServerError`
	_ = &http.Response{StatusCode: 501} // want `"501" can be replaced by http\.StatusNotImplemented`
	_ = &http.Response{StatusCode: 502} // want `"502" can be replaced by http\.StatusBadGateway`
	_ = &http.Response{StatusCode: 503} // want `"503" can be replaced by http\.StatusServiceUnavailable`
	_ = &http.Response{StatusCode: 504} // want `"504" can be replaced by http\.StatusGatewayTimeout`
	_ = &http.Response{StatusCode: 505} // want `"505" can be replaced by http\.StatusHTTPVersionNotSupported`
	_ = &http.Response{StatusCode: 506} // want `"506" can be replaced by http\.StatusVariantAlsoNegotiates`
	_ = &http.Response{StatusCode: 507} // want `"507" can be replaced by http\.StatusInsufficientStorage`
	_ = &http.Response{StatusCode: 508} // want `"508" can be replaced by http\.StatusLoopDetected`
	_ = &http.Response{StatusCode: 510} // want `"510" can be replaced by http\.StatusNotExtended`
	_ = &http.Response{StatusCode: 511} // want `"511" can be replaced by http\.StatusNetworkAuthenticationRequired`
)

var (
	_ = &http.Response{StatusCode: http.StatusContinue}
	_ = &http.Response{StatusCode: http.StatusSwitchingProtocols}
	_ = &http.Response{StatusCode: http.StatusProcessing}
	_ = &http.Response{StatusCode: http.StatusEarlyHints}
	_ = &http.Response{StatusCode: http.StatusOK}
	_ = &http.Response{StatusCode: http.StatusCreated}
	_ = &http.Response{StatusCode: http.StatusAccepted}
	_ = &http.Response{StatusCode: http.StatusNonAuthoritativeInfo}
	_ = &http.Response{StatusCode: http.StatusNoContent}
	_ = &http.Response{StatusCode: http.StatusResetContent}
	_ = &http.Response{StatusCode: http.StatusPartialContent}
	_ = &http.Response{StatusCode: http.StatusMultiStatus}
	_ = &http.Response{StatusCode: http.StatusAlreadyReported}
	_ = &http.Response{StatusCode: http.StatusIMUsed}
	_ = &http.Response{StatusCode: http.StatusMultipleChoices}
	_ = &http.Response{StatusCode: http.StatusMovedPermanently}
	_ = &http.Response{StatusCode: http.StatusFound}
	_ = &http.Response{StatusCode: http.StatusSeeOther}
	_ = &http.Response{StatusCode: http.StatusNotModified}
	_ = &http.Response{StatusCode: http.StatusUseProxy}
	_ = &http.Response{StatusCode: http.StatusTemporaryRedirect}
	_ = &http.Response{StatusCode: http.StatusPermanentRedirect}
	_ = &http.Response{StatusCode: http.StatusBadRequest}
	_ = &http.Response{StatusCode: http.StatusUnauthorized}
	_ = &http.Response{StatusCode: http.StatusPaymentRequired}
	_ = &http.Response{StatusCode: http.StatusForbidden}
	_ = &http.Response{StatusCode: http.StatusNotFound}
	_ = &http.Response{StatusCode: http.StatusMethodNotAllowed}
	_ = &http.Response{StatusCode: http.StatusNotAcceptable}
	_ = &http.Response{StatusCode: http.StatusProxyAuthRequired}
	_ = &http.Response{StatusCode: http.StatusRequestTimeout}
	_ = &http.Response{StatusCode: http.StatusConflict}
	_ = &http.Response{StatusCode: http.StatusGone}
	_ = &http.Response{StatusCode: http.StatusLengthRequired}
	_ = &http.Response{StatusCode: http.StatusPreconditionFailed}
	_ = &http.Response{StatusCode: http.StatusRequestEntityTooLarge}
	_ = &http.Response{StatusCode: http.StatusRequestURITooLong}
	_ = &http.Response{StatusCode: http.StatusUnsupportedMediaType}
	_ = &http.Response{StatusCode: http.StatusRequestedRangeNotSatisfiable}
	_ = &http.Response{StatusCode: http.StatusExpectationFailed}
	_ = &http.Response{StatusCode: http.StatusTeapot}
	_ = &http.Response{StatusCode: http.StatusMisdirectedRequest}
	_ = &http.Response{StatusCode: http.StatusUnprocessableEntity}
	_ = &http.Response{StatusCode: http.StatusLocked}
	_ = &http.Response{StatusCode: http.StatusFailedDependency}
	_ = &http.Response{StatusCode: http.StatusTooEarly}
	_ = &http.Response{StatusCode: http.StatusUpgradeRequired}
	_ = &http.Response{StatusCode: http.StatusPreconditionRequired}
	_ = &http.Response{StatusCode: http.StatusTooManyRequests}
	_ = &http.Response{StatusCode: http.StatusRequestHeaderFieldsTooLarge}
	_ = &http.Response{StatusCode: http.StatusUnavailableForLegalReasons}
	_ = &http.Response{StatusCode: http.StatusInternalServerError}
	_ = &http.Response{StatusCode: http.StatusNotImplemented}
	_ = &http.Response{StatusCode: http.StatusBadGateway}
	_ = &http.Response{StatusCode: http.StatusServiceUnavailable}
	_ = &http.Response{StatusCode: http.StatusGatewayTimeout}
	_ = &http.Response{StatusCode: http.StatusHTTPVersionNotSupported}
	_ = &http.Response{StatusCode: http.StatusVariantAlsoNegotiates}
	_ = &http.Response{StatusCode: http.StatusInsufficientStorage}
	_ = &http.Response{StatusCode: http.StatusLoopDetected}
	_ = &http.Response{StatusCode: http.StatusNotExtended}
	_ = &http.Response{StatusCode: http.StatusNetworkAuthenticationRequired}
)

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 100 { // want `"100" can be replaced by http\.StatusContinue`
		return nil
	} else if resp.StatusCode == 100 { // want `"100" can be replaced by http\.StatusContinue`
		return nil
	} else if false || resp.StatusCode == 100 { // want `"100" can be replaced by http\.StatusContinue`
		return nil
	}
	if resp.StatusCode == 101 { // want `"101" can be replaced by http\.StatusSwitchingProtocols`
		return nil
	} else if resp.StatusCode == 101 { // want `"101" can be replaced by http\.StatusSwitchingProtocols`
		return nil
	} else if false || resp.StatusCode == 101 { // want `"101" can be replaced by http\.StatusSwitchingProtocols`
		return nil
	}
	if resp.StatusCode == 102 { // want `"102" can be replaced by http\.StatusProcessing`
		return nil
	} else if resp.StatusCode == 102 { // want `"102" can be replaced by http\.StatusProcessing`
		return nil
	} else if false || resp.StatusCode == 102 { // want `"102" can be replaced by http\.StatusProcessing`
		return nil
	}
	if resp.StatusCode == 103 { // want `"103" can be replaced by http\.StatusEarlyHints`
		return nil
	} else if resp.StatusCode == 103 { // want `"103" can be replaced by http\.StatusEarlyHints`
		return nil
	} else if false || resp.StatusCode == 103 { // want `"103" can be replaced by http\.StatusEarlyHints`
		return nil
	}
	if resp.StatusCode == 200 { // want `"200" can be replaced by http\.StatusOK`
		return nil
	} else if resp.StatusCode == 200 { // want `"200" can be replaced by http\.StatusOK`
		return nil
	} else if false || resp.StatusCode == 200 { // want `"200" can be replaced by http\.StatusOK`
		return nil
	}
	if resp.StatusCode == 201 { // want `"201" can be replaced by http\.StatusCreated`
		return nil
	} else if resp.StatusCode == 201 { // want `"201" can be replaced by http\.StatusCreated`
		return nil
	} else if false || resp.StatusCode == 201 { // want `"201" can be replaced by http\.StatusCreated`
		return nil
	}
	if resp.StatusCode == 202 { // want `"202" can be replaced by http\.StatusAccepted`
		return nil
	} else if resp.StatusCode == 202 { // want `"202" can be replaced by http\.StatusAccepted`
		return nil
	} else if false || resp.StatusCode == 202 { // want `"202" can be replaced by http\.StatusAccepted`
		return nil
	}
	if resp.StatusCode == 203 { // want `"203" can be replaced by http\.StatusNonAuthoritativeInfo`
		return nil
	} else if resp.StatusCode == 203 { // want `"203" can be replaced by http\.StatusNonAuthoritativeInfo`
		return nil
	} else if false || resp.StatusCode == 203 { // want `"203" can be replaced by http\.StatusNonAuthoritativeInfo`
		return nil
	}
	if resp.StatusCode == 204 { // want `"204" can be replaced by http\.StatusNoContent`
		return nil
	} else if resp.StatusCode == 204 { // want `"204" can be replaced by http\.StatusNoContent`
		return nil
	} else if false || resp.StatusCode == 204 { // want `"204" can be replaced by http\.StatusNoContent`
		return nil
	}
	if resp.StatusCode == 205 { // want `"205" can be replaced by http\.StatusResetContent`
		return nil
	} else if resp.StatusCode == 205 { // want `"205" can be replaced by http\.StatusResetContent`
		return nil
	} else if false || resp.StatusCode == 205 { // want `"205" can be replaced by http\.StatusResetContent`
		return nil
	}
	if resp.StatusCode == 206 { // want `"206" can be replaced by http\.StatusPartialContent`
		return nil
	} else if resp.StatusCode == 206 { // want `"206" can be replaced by http\.StatusPartialContent`
		return nil
	} else if false || resp.StatusCode == 206 { // want `"206" can be replaced by http\.StatusPartialContent`
		return nil
	}
	if resp.StatusCode == 207 { // want `"207" can be replaced by http\.StatusMultiStatus`
		return nil
	} else if resp.StatusCode == 207 { // want `"207" can be replaced by http\.StatusMultiStatus`
		return nil
	} else if false || resp.StatusCode == 207 { // want `"207" can be replaced by http\.StatusMultiStatus`
		return nil
	}
	if resp.StatusCode == 208 { // want `"208" can be replaced by http\.StatusAlreadyReported`
		return nil
	} else if resp.StatusCode == 208 { // want `"208" can be replaced by http\.StatusAlreadyReported`
		return nil
	} else if false || resp.StatusCode == 208 { // want `"208" can be replaced by http\.StatusAlreadyReported`
		return nil
	}
	if resp.StatusCode == 226 { // want `"226" can be replaced by http\.StatusIMUsed`
		return nil
	} else if resp.StatusCode == 226 { // want `"226" can be replaced by http\.StatusIMUsed`
		return nil
	} else if false || resp.StatusCode == 226 { // want `"226" can be replaced by http\.StatusIMUsed`
		return nil
	}
	if resp.StatusCode == 300 { // want `"300" can be replaced by http\.StatusMultipleChoices`
		return nil
	} else if resp.StatusCode == 300 { // want `"300" can be replaced by http\.StatusMultipleChoices`
		return nil
	} else if false || resp.StatusCode == 300 { // want `"300" can be replaced by http\.StatusMultipleChoices`
		return nil
	}
	if resp.StatusCode == 301 { // want `"301" can be replaced by http\.StatusMovedPermanently`
		return nil
	} else if resp.StatusCode == 301 { // want `"301" can be replaced by http\.StatusMovedPermanently`
		return nil
	} else if false || resp.StatusCode == 301 { // want `"301" can be replaced by http\.StatusMovedPermanently`
		return nil
	}
	if resp.StatusCode == 302 { // want `"302" can be replaced by http\.StatusFound`
		return nil
	} else if resp.StatusCode == 302 { // want `"302" can be replaced by http\.StatusFound`
		return nil
	} else if false || resp.StatusCode == 302 { // want `"302" can be replaced by http\.StatusFound`
		return nil
	}
	if resp.StatusCode == 303 { // want `"303" can be replaced by http\.StatusSeeOther`
		return nil
	} else if resp.StatusCode == 303 { // want `"303" can be replaced by http\.StatusSeeOther`
		return nil
	} else if false || resp.StatusCode == 303 { // want `"303" can be replaced by http\.StatusSeeOther`
		return nil
	}
	if resp.StatusCode == 304 { // want `"304" can be replaced by http\.StatusNotModified`
		return nil
	} else if resp.StatusCode == 304 { // want `"304" can be replaced by http\.StatusNotModified`
		return nil
	} else if false || resp.StatusCode == 304 { // want `"304" can be replaced by http\.StatusNotModified`
		return nil
	}
	if resp.StatusCode == 305 { // want `"305" can be replaced by http\.StatusUseProxy`
		return nil
	} else if resp.StatusCode == 305 { // want `"305" can be replaced by http\.StatusUseProxy`
		return nil
	} else if false || resp.StatusCode == 305 { // want `"305" can be replaced by http\.StatusUseProxy`
		return nil
	}
	if resp.StatusCode == 307 { // want `"307" can be replaced by http\.StatusTemporaryRedirect`
		return nil
	} else if resp.StatusCode == 307 { // want `"307" can be replaced by http\.StatusTemporaryRedirect`
		return nil
	} else if false || resp.StatusCode == 307 { // want `"307" can be replaced by http\.StatusTemporaryRedirect`
		return nil
	}
	if resp.StatusCode == 308 { // want `"308" can be replaced by http\.StatusPermanentRedirect`
		return nil
	} else if resp.StatusCode == 308 { // want `"308" can be replaced by http\.StatusPermanentRedirect`
		return nil
	} else if false || resp.StatusCode == 308 { // want `"308" can be replaced by http\.StatusPermanentRedirect`
		return nil
	}
	if resp.StatusCode == 400 { // want `"400" can be replaced by http\.StatusBadRequest`
		return nil
	} else if resp.StatusCode == 400 { // want `"400" can be replaced by http\.StatusBadRequest`
		return nil
	} else if false || resp.StatusCode == 400 { // want `"400" can be replaced by http\.StatusBadRequest`
		return nil
	}
	if resp.StatusCode == 401 { // want `"401" can be replaced by http\.StatusUnauthorized`
		return nil
	} else if resp.StatusCode == 401 { // want `"401" can be replaced by http\.StatusUnauthorized`
		return nil
	} else if false || resp.StatusCode == 401 { // want `"401" can be replaced by http\.StatusUnauthorized`
		return nil
	}
	if resp.StatusCode == 402 { // want `"402" can be replaced by http\.StatusPaymentRequired`
		return nil
	} else if resp.StatusCode == 402 { // want `"402" can be replaced by http\.StatusPaymentRequired`
		return nil
	} else if false || resp.StatusCode == 402 { // want `"402" can be replaced by http\.StatusPaymentRequired`
		return nil
	}
	if resp.StatusCode == 403 { // want `"403" can be replaced by http\.StatusForbidden`
		return nil
	} else if resp.StatusCode == 403 { // want `"403" can be replaced by http\.StatusForbidden`
		return nil
	} else if false || resp.StatusCode == 403 { // want `"403" can be replaced by http\.StatusForbidden`
		return nil
	}
	if resp.StatusCode == 404 { // want `"404" can be replaced by http\.StatusNotFound`
		return nil
	} else if resp.StatusCode == 404 { // want `"404" can be replaced by http\.StatusNotFound`
		return nil
	} else if false || resp.StatusCode == 404 { // want `"404" can be replaced by http\.StatusNotFound`
		return nil
	}
	if resp.StatusCode == 405 { // want `"405" can be replaced by http\.StatusMethodNotAllowed`
		return nil
	} else if resp.StatusCode == 405 { // want `"405" can be replaced by http\.StatusMethodNotAllowed`
		return nil
	} else if false || resp.StatusCode == 405 { // want `"405" can be replaced by http\.StatusMethodNotAllowed`
		return nil
	}
	if resp.StatusCode == 406 { // want `"406" can be replaced by http\.StatusNotAcceptable`
		return nil
	} else if resp.StatusCode == 406 { // want `"406" can be replaced by http\.StatusNotAcceptable`
		return nil
	} else if false || resp.StatusCode == 406 { // want `"406" can be replaced by http\.StatusNotAcceptable`
		return nil
	}
	if resp.StatusCode == 407 { // want `"407" can be replaced by http\.StatusProxyAuthRequired`
		return nil
	} else if resp.StatusCode == 407 { // want `"407" can be replaced by http\.StatusProxyAuthRequired`
		return nil
	} else if false || resp.StatusCode == 407 { // want `"407" can be replaced by http\.StatusProxyAuthRequired`
		return nil
	}
	if resp.StatusCode == 408 { // want `"408" can be replaced by http\.StatusRequestTimeout`
		return nil
	} else if resp.StatusCode == 408 { // want `"408" can be replaced by http\.StatusRequestTimeout`
		return nil
	} else if false || resp.StatusCode == 408 { // want `"408" can be replaced by http\.StatusRequestTimeout`
		return nil
	}
	if resp.StatusCode == 409 { // want `"409" can be replaced by http\.StatusConflict`
		return nil
	} else if resp.StatusCode == 409 { // want `"409" can be replaced by http\.StatusConflict`
		return nil
	} else if false || resp.StatusCode == 409 { // want `"409" can be replaced by http\.StatusConflict`
		return nil
	}
	if resp.StatusCode == 410 { // want `"410" can be replaced by http\.StatusGone`
		return nil
	} else if resp.StatusCode == 410 { // want `"410" can be replaced by http\.StatusGone`
		return nil
	} else if false || resp.StatusCode == 410 { // want `"410" can be replaced by http\.StatusGone`
		return nil
	}
	if resp.StatusCode == 411 { // want `"411" can be replaced by http\.StatusLengthRequired`
		return nil
	} else if resp.StatusCode == 411 { // want `"411" can be replaced by http\.StatusLengthRequired`
		return nil
	} else if false || resp.StatusCode == 411 { // want `"411" can be replaced by http\.StatusLengthRequired`
		return nil
	}
	if resp.StatusCode == 412 { // want `"412" can be replaced by http\.StatusPreconditionFailed`
		return nil
	} else if resp.StatusCode == 412 { // want `"412" can be replaced by http\.StatusPreconditionFailed`
		return nil
	} else if false || resp.StatusCode == 412 { // want `"412" can be replaced by http\.StatusPreconditionFailed`
		return nil
	}
	if resp.StatusCode == 413 { // want `"413" can be replaced by http\.StatusRequestEntityTooLarge`
		return nil
	} else if resp.StatusCode == 413 { // want `"413" can be replaced by http\.StatusRequestEntityTooLarge`
		return nil
	} else if false || resp.StatusCode == 413 { // want `"413" can be replaced by http\.StatusRequestEntityTooLarge`
		return nil
	}
	if resp.StatusCode == 414 { // want `"414" can be replaced by http\.StatusRequestURITooLong`
		return nil
	} else if resp.StatusCode == 414 { // want `"414" can be replaced by http\.StatusRequestURITooLong`
		return nil
	} else if false || resp.StatusCode == 414 { // want `"414" can be replaced by http\.StatusRequestURITooLong`
		return nil
	}
	if resp.StatusCode == 415 { // want `"415" can be replaced by http\.StatusUnsupportedMediaType`
		return nil
	} else if resp.StatusCode == 415 { // want `"415" can be replaced by http\.StatusUnsupportedMediaType`
		return nil
	} else if false || resp.StatusCode == 415 { // want `"415" can be replaced by http\.StatusUnsupportedMediaType`
		return nil
	}
	if resp.StatusCode == 416 { // want `"416" can be replaced by http\.StatusRequestedRangeNotSatisfiable`
		return nil
	} else if resp.StatusCode == 416 { // want `"416" can be replaced by http\.StatusRequestedRangeNotSatisfiable`
		return nil
	} else if false || resp.StatusCode == 416 { // want `"416" can be replaced by http\.StatusRequestedRangeNotSatisfiable`
		return nil
	}
	if resp.StatusCode == 417 { // want `"417" can be replaced by http\.StatusExpectationFailed`
		return nil
	} else if resp.StatusCode == 417 { // want `"417" can be replaced by http\.StatusExpectationFailed`
		return nil
	} else if false || resp.StatusCode == 417 { // want `"417" can be replaced by http\.StatusExpectationFailed`
		return nil
	}
	if resp.StatusCode == 418 { // want `"418" can be replaced by http\.StatusTeapot`
		return nil
	} else if resp.StatusCode == 418 { // want `"418" can be replaced by http\.StatusTeapot`
		return nil
	} else if false || resp.StatusCode == 418 { // want `"418" can be replaced by http\.StatusTeapot`
		return nil
	}
	if resp.StatusCode == 421 { // want `"421" can be replaced by http\.StatusMisdirectedRequest`
		return nil
	} else if resp.StatusCode == 421 { // want `"421" can be replaced by http\.StatusMisdirectedRequest`
		return nil
	} else if false || resp.StatusCode == 421 { // want `"421" can be replaced by http\.StatusMisdirectedRequest`
		return nil
	}
	if resp.StatusCode == 422 { // want `"422" can be replaced by http\.StatusUnprocessableEntity`
		return nil
	} else if resp.StatusCode == 422 { // want `"422" can be replaced by http\.StatusUnprocessableEntity`
		return nil
	} else if false || resp.StatusCode == 422 { // want `"422" can be replaced by http\.StatusUnprocessableEntity`
		return nil
	}
	if resp.StatusCode == 423 { // want `"423" can be replaced by http\.StatusLocked`
		return nil
	} else if resp.StatusCode == 423 { // want `"423" can be replaced by http\.StatusLocked`
		return nil
	} else if false || resp.StatusCode == 423 { // want `"423" can be replaced by http\.StatusLocked`
		return nil
	}
	if resp.StatusCode == 424 { // want `"424" can be replaced by http\.StatusFailedDependency`
		return nil
	} else if resp.StatusCode == 424 { // want `"424" can be replaced by http\.StatusFailedDependency`
		return nil
	} else if false || resp.StatusCode == 424 { // want `"424" can be replaced by http\.StatusFailedDependency`
		return nil
	}
	if resp.StatusCode == 425 { // want `"425" can be replaced by http\.StatusTooEarly`
		return nil
	} else if resp.StatusCode == 425 { // want `"425" can be replaced by http\.StatusTooEarly`
		return nil
	} else if false || resp.StatusCode == 425 { // want `"425" can be replaced by http\.StatusTooEarly`
		return nil
	}
	if resp.StatusCode == 426 { // want `"426" can be replaced by http\.StatusUpgradeRequired`
		return nil
	} else if resp.StatusCode == 426 { // want `"426" can be replaced by http\.StatusUpgradeRequired`
		return nil
	} else if false || resp.StatusCode == 426 { // want `"426" can be replaced by http\.StatusUpgradeRequired`
		return nil
	}
	if resp.StatusCode == 428 { // want `"428" can be replaced by http\.StatusPreconditionRequired`
		return nil
	} else if resp.StatusCode == 428 { // want `"428" can be replaced by http\.StatusPreconditionRequired`
		return nil
	} else if false || resp.StatusCode == 428 { // want `"428" can be replaced by http\.StatusPreconditionRequired`
		return nil
	}
	if resp.StatusCode == 429 { // want `"429" can be replaced by http\.StatusTooManyRequests`
		return nil
	} else if resp.StatusCode == 429 { // want `"429" can be replaced by http\.StatusTooManyRequests`
		return nil
	} else if false || resp.StatusCode == 429 { // want `"429" can be replaced by http\.StatusTooManyRequests`
		return nil
	}
	if resp.StatusCode == 431 { // want `"431" can be replaced by http\.StatusRequestHeaderFieldsTooLarge`
		return nil
	} else if resp.StatusCode == 431 { // want `"431" can be replaced by http\.StatusRequestHeaderFieldsTooLarge`
		return nil
	} else if false || resp.StatusCode == 431 { // want `"431" can be replaced by http\.StatusRequestHeaderFieldsTooLarge`
		return nil
	}
	if resp.StatusCode == 451 { // want `"451" can be replaced by http\.StatusUnavailableForLegalReasons`
		return nil
	} else if resp.StatusCode == 451 { // want `"451" can be replaced by http\.StatusUnavailableForLegalReasons`
		return nil
	} else if false || resp.StatusCode == 451 { // want `"451" can be replaced by http\.StatusUnavailableForLegalReasons`
		return nil
	}
	if resp.StatusCode == 500 { // want `"500" can be replaced by http\.StatusInternalServerError`
		return nil
	} else if resp.StatusCode == 500 { // want `"500" can be replaced by http\.StatusInternalServerError`
		return nil
	} else if false || resp.StatusCode == 500 { // want `"500" can be replaced by http\.StatusInternalServerError`
		return nil
	}
	if resp.StatusCode == 501 { // want `"501" can be replaced by http\.StatusNotImplemented`
		return nil
	} else if resp.StatusCode == 501 { // want `"501" can be replaced by http\.StatusNotImplemented`
		return nil
	} else if false || resp.StatusCode == 501 { // want `"501" can be replaced by http\.StatusNotImplemented`
		return nil
	}
	if resp.StatusCode == 502 { // want `"502" can be replaced by http\.StatusBadGateway`
		return nil
	} else if resp.StatusCode == 502 { // want `"502" can be replaced by http\.StatusBadGateway`
		return nil
	} else if false || resp.StatusCode == 502 { // want `"502" can be replaced by http\.StatusBadGateway`
		return nil
	}
	if resp.StatusCode == 503 { // want `"503" can be replaced by http\.StatusServiceUnavailable`
		return nil
	} else if resp.StatusCode == 503 { // want `"503" can be replaced by http\.StatusServiceUnavailable`
		return nil
	} else if false || resp.StatusCode == 503 { // want `"503" can be replaced by http\.StatusServiceUnavailable`
		return nil
	}
	if resp.StatusCode == 504 { // want `"504" can be replaced by http\.StatusGatewayTimeout`
		return nil
	} else if resp.StatusCode == 504 { // want `"504" can be replaced by http\.StatusGatewayTimeout`
		return nil
	} else if false || resp.StatusCode == 504 { // want `"504" can be replaced by http\.StatusGatewayTimeout`
		return nil
	}
	if resp.StatusCode == 505 { // want `"505" can be replaced by http\.StatusHTTPVersionNotSupported`
		return nil
	} else if resp.StatusCode == 505 { // want `"505" can be replaced by http\.StatusHTTPVersionNotSupported`
		return nil
	} else if false || resp.StatusCode == 505 { // want `"505" can be replaced by http\.StatusHTTPVersionNotSupported`
		return nil
	}
	if resp.StatusCode == 506 { // want `"506" can be replaced by http\.StatusVariantAlsoNegotiates`
		return nil
	} else if resp.StatusCode == 506 { // want `"506" can be replaced by http\.StatusVariantAlsoNegotiates`
		return nil
	} else if false || resp.StatusCode == 506 { // want `"506" can be replaced by http\.StatusVariantAlsoNegotiates`
		return nil
	}
	if resp.StatusCode == 507 { // want `"507" can be replaced by http\.StatusInsufficientStorage`
		return nil
	} else if resp.StatusCode == 507 { // want `"507" can be replaced by http\.StatusInsufficientStorage`
		return nil
	} else if false || resp.StatusCode == 507 { // want `"507" can be replaced by http\.StatusInsufficientStorage`
		return nil
	}
	if resp.StatusCode == 508 { // want `"508" can be replaced by http\.StatusLoopDetected`
		return nil
	} else if resp.StatusCode == 508 { // want `"508" can be replaced by http\.StatusLoopDetected`
		return nil
	} else if false || resp.StatusCode == 508 { // want `"508" can be replaced by http\.StatusLoopDetected`
		return nil
	}
	if resp.StatusCode == 510 { // want `"510" can be replaced by http\.StatusNotExtended`
		return nil
	} else if resp.StatusCode == 510 { // want `"510" can be replaced by http\.StatusNotExtended`
		return nil
	} else if false || resp.StatusCode == 510 { // want `"510" can be replaced by http\.StatusNotExtended`
		return nil
	}
	if resp.StatusCode == 511 { // want `"511" can be replaced by http\.StatusNetworkAuthenticationRequired`
		return nil
	} else if resp.StatusCode == 511 { // want `"511" can be replaced by http\.StatusNetworkAuthenticationRequired`
		return nil
	} else if false || resp.StatusCode == 511 { // want `"511" can be replaced by http\.StatusNetworkAuthenticationRequired`
		return nil
	}
	for resp.StatusCode == 100 { // want `"100" can be replaced by http\.StatusContinue`
		return nil
	}
	for resp.StatusCode == 101 { // want `"101" can be replaced by http\.StatusSwitchingProtocols`
		return nil
	}
	for resp.StatusCode == 102 { // want `"102" can be replaced by http\.StatusProcessing`
		return nil
	}
	for resp.StatusCode == 103 { // want `"103" can be replaced by http\.StatusEarlyHints`
		return nil
	}
	for resp.StatusCode == 200 { // want `"200" can be replaced by http\.StatusOK`
		return nil
	}
	for resp.StatusCode == 201 { // want `"201" can be replaced by http\.StatusCreated`
		return nil
	}
	for resp.StatusCode == 202 { // want `"202" can be replaced by http\.StatusAccepted`
		return nil
	}
	for resp.StatusCode == 203 { // want `"203" can be replaced by http\.StatusNonAuthoritativeInfo`
		return nil
	}
	for resp.StatusCode == 204 { // want `"204" can be replaced by http\.StatusNoContent`
		return nil
	}
	for resp.StatusCode == 205 { // want `"205" can be replaced by http\.StatusResetContent`
		return nil
	}
	for resp.StatusCode == 206 { // want `"206" can be replaced by http\.StatusPartialContent`
		return nil
	}
	for resp.StatusCode == 207 { // want `"207" can be replaced by http\.StatusMultiStatus`
		return nil
	}
	for resp.StatusCode == 208 { // want `"208" can be replaced by http\.StatusAlreadyReported`
		return nil
	}
	for resp.StatusCode == 226 { // want `"226" can be replaced by http\.StatusIMUsed`
		return nil
	}
	for resp.StatusCode == 300 { // want `"300" can be replaced by http\.StatusMultipleChoices`
		return nil
	}
	for resp.StatusCode == 301 { // want `"301" can be replaced by http\.StatusMovedPermanently`
		return nil
	}
	for resp.StatusCode == 302 { // want `"302" can be replaced by http\.StatusFound`
		return nil
	}
	for resp.StatusCode == 303 { // want `"303" can be replaced by http\.StatusSeeOther`
		return nil
	}
	for resp.StatusCode == 304 { // want `"304" can be replaced by http\.StatusNotModified`
		return nil
	}
	for resp.StatusCode == 305 { // want `"305" can be replaced by http\.StatusUseProxy`
		return nil
	}
	for resp.StatusCode == 307 { // want `"307" can be replaced by http\.StatusTemporaryRedirect`
		return nil
	}
	for resp.StatusCode == 308 { // want `"308" can be replaced by http\.StatusPermanentRedirect`
		return nil
	}
	for resp.StatusCode == 400 { // want `"400" can be replaced by http\.StatusBadRequest`
		return nil
	}
	for resp.StatusCode == 401 { // want `"401" can be replaced by http\.StatusUnauthorized`
		return nil
	}
	for resp.StatusCode == 402 { // want `"402" can be replaced by http\.StatusPaymentRequired`
		return nil
	}
	for resp.StatusCode == 403 { // want `"403" can be replaced by http\.StatusForbidden`
		return nil
	}
	for resp.StatusCode == 404 { // want `"404" can be replaced by http\.StatusNotFound`
		return nil
	}
	for resp.StatusCode == 405 { // want `"405" can be replaced by http\.StatusMethodNotAllowed`
		return nil
	}
	for resp.StatusCode == 406 { // want `"406" can be replaced by http\.StatusNotAcceptable`
		return nil
	}
	for resp.StatusCode == 407 { // want `"407" can be replaced by http\.StatusProxyAuthRequired`
		return nil
	}
	for resp.StatusCode == 408 { // want `"408" can be replaced by http\.StatusRequestTimeout`
		return nil
	}
	for resp.StatusCode == 409 { // want `"409" can be replaced by http\.StatusConflict`
		return nil
	}
	for resp.StatusCode == 410 { // want `"410" can be replaced by http\.StatusGone`
		return nil
	}
	for resp.StatusCode == 411 { // want `"411" can be replaced by http\.StatusLengthRequired`
		return nil
	}
	for resp.StatusCode == 412 { // want `"412" can be replaced by http\.StatusPreconditionFailed`
		return nil
	}
	for resp.StatusCode == 413 { // want `"413" can be replaced by http\.StatusRequestEntityTooLarge`
		return nil
	}
	for resp.StatusCode == 414 { // want `"414" can be replaced by http\.StatusRequestURITooLong`
		return nil
	}
	for resp.StatusCode == 415 { // want `"415" can be replaced by http\.StatusUnsupportedMediaType`
		return nil
	}
	for resp.StatusCode == 416 { // want `"416" can be replaced by http\.StatusRequestedRangeNotSatisfiable`
		return nil
	}
	for resp.StatusCode == 417 { // want `"417" can be replaced by http\.StatusExpectationFailed`
		return nil
	}
	for resp.StatusCode == 418 { // want `"418" can be replaced by http\.StatusTeapot`
		return nil
	}
	for resp.StatusCode == 421 { // want `"421" can be replaced by http\.StatusMisdirectedRequest`
		return nil
	}
	for resp.StatusCode == 422 { // want `"422" can be replaced by http\.StatusUnprocessableEntity`
		return nil
	}
	for resp.StatusCode == 423 { // want `"423" can be replaced by http\.StatusLocked`
		return nil
	}
	for resp.StatusCode == 424 { // want `"424" can be replaced by http\.StatusFailedDependency`
		return nil
	}
	for resp.StatusCode == 425 { // want `"425" can be replaced by http\.StatusTooEarly`
		return nil
	}
	for resp.StatusCode == 426 { // want `"426" can be replaced by http\.StatusUpgradeRequired`
		return nil
	}
	for resp.StatusCode == 428 { // want `"428" can be replaced by http\.StatusPreconditionRequired`
		return nil
	}
	for resp.StatusCode == 429 { // want `"429" can be replaced by http\.StatusTooManyRequests`
		return nil
	}
	for resp.StatusCode == 431 { // want `"431" can be replaced by http\.StatusRequestHeaderFieldsTooLarge`
		return nil
	}
	for resp.StatusCode == 451 { // want `"451" can be replaced by http\.StatusUnavailableForLegalReasons`
		return nil
	}
	for resp.StatusCode == 500 { // want `"500" can be replaced by http\.StatusInternalServerError`
		return nil
	}
	for resp.StatusCode == 501 { // want `"501" can be replaced by http\.StatusNotImplemented`
		return nil
	}
	for resp.StatusCode == 502 { // want `"502" can be replaced by http\.StatusBadGateway`
		return nil
	}
	for resp.StatusCode == 503 { // want `"503" can be replaced by http\.StatusServiceUnavailable`
		return nil
	}
	for resp.StatusCode == 504 { // want `"504" can be replaced by http\.StatusGatewayTimeout`
		return nil
	}
	for resp.StatusCode == 505 { // want `"505" can be replaced by http\.StatusHTTPVersionNotSupported`
		return nil
	}
	for resp.StatusCode == 506 { // want `"506" can be replaced by http\.StatusVariantAlsoNegotiates`
		return nil
	}
	for resp.StatusCode == 507 { // want `"507" can be replaced by http\.StatusInsufficientStorage`
		return nil
	}
	for resp.StatusCode == 508 { // want `"508" can be replaced by http\.StatusLoopDetected`
		return nil
	}
	for resp.StatusCode == 510 { // want `"510" can be replaced by http\.StatusNotExtended`
		return nil
	}
	for resp.StatusCode == 511 { // want `"511" can be replaced by http\.StatusNetworkAuthenticationRequired`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == http.StatusContinue {
		return nil
	} else if resp.StatusCode == http.StatusContinue {
		return nil
	} else if false || resp.StatusCode == http.StatusContinue {
		return nil
	}
	if resp.StatusCode == http.StatusSwitchingProtocols {
		return nil
	} else if resp.StatusCode == http.StatusSwitchingProtocols {
		return nil
	} else if false || resp.StatusCode == http.StatusSwitchingProtocols {
		return nil
	}
	if resp.StatusCode == http.StatusProcessing {
		return nil
	} else if resp.StatusCode == http.StatusProcessing {
		return nil
	} else if false || resp.StatusCode == http.StatusProcessing {
		return nil
	}
	if resp.StatusCode == http.StatusEarlyHints {
		return nil
	} else if resp.StatusCode == http.StatusEarlyHints {
		return nil
	} else if false || resp.StatusCode == http.StatusEarlyHints {
		return nil
	}
	if resp.StatusCode == http.StatusOK {
		return nil
	} else if resp.StatusCode == http.StatusOK {
		return nil
	} else if false || resp.StatusCode == http.StatusOK {
		return nil
	}
	if resp.StatusCode == http.StatusCreated {
		return nil
	} else if resp.StatusCode == http.StatusCreated {
		return nil
	} else if false || resp.StatusCode == http.StatusCreated {
		return nil
	}
	if resp.StatusCode == http.StatusAccepted {
		return nil
	} else if resp.StatusCode == http.StatusAccepted {
		return nil
	} else if false || resp.StatusCode == http.StatusAccepted {
		return nil
	}
	if resp.StatusCode == http.StatusNonAuthoritativeInfo {
		return nil
	} else if resp.StatusCode == http.StatusNonAuthoritativeInfo {
		return nil
	} else if false || resp.StatusCode == http.StatusNonAuthoritativeInfo {
		return nil
	}
	if resp.StatusCode == http.StatusNoContent {
		return nil
	} else if resp.StatusCode == http.StatusNoContent {
		return nil
	} else if false || resp.StatusCode == http.StatusNoContent {
		return nil
	}
	if resp.StatusCode == http.StatusResetContent {
		return nil
	} else if resp.StatusCode == http.StatusResetContent {
		return nil
	} else if false || resp.StatusCode == http.StatusResetContent {
		return nil
	}
	if resp.StatusCode == http.StatusPartialContent {
		return nil
	} else if resp.StatusCode == http.StatusPartialContent {
		return nil
	} else if false || resp.StatusCode == http.StatusPartialContent {
		return nil
	}
	if resp.StatusCode == http.StatusMultiStatus {
		return nil
	} else if resp.StatusCode == http.StatusMultiStatus {
		return nil
	} else if false || resp.StatusCode == http.StatusMultiStatus {
		return nil
	}
	if resp.StatusCode == http.StatusAlreadyReported {
		return nil
	} else if resp.StatusCode == http.StatusAlreadyReported {
		return nil
	} else if false || resp.StatusCode == http.StatusAlreadyReported {
		return nil
	}
	if resp.StatusCode == http.StatusIMUsed {
		return nil
	} else if resp.StatusCode == http.StatusIMUsed {
		return nil
	} else if false || resp.StatusCode == http.StatusIMUsed {
		return nil
	}
	if resp.StatusCode == http.StatusMultipleChoices {
		return nil
	} else if resp.StatusCode == http.StatusMultipleChoices {
		return nil
	} else if false || resp.StatusCode == http.StatusMultipleChoices {
		return nil
	}
	if resp.StatusCode == http.StatusMovedPermanently {
		return nil
	} else if resp.StatusCode == http.StatusMovedPermanently {
		return nil
	} else if false || resp.StatusCode == http.StatusMovedPermanently {
		return nil
	}
	if resp.StatusCode == http.StatusFound {
		return nil
	} else if resp.StatusCode == http.StatusFound {
		return nil
	} else if false || resp.StatusCode == http.StatusFound {
		return nil
	}
	if resp.StatusCode == http.StatusSeeOther {
		return nil
	} else if resp.StatusCode == http.StatusSeeOther {
		return nil
	} else if false || resp.StatusCode == http.StatusSeeOther {
		return nil
	}
	if resp.StatusCode == http.StatusNotModified {
		return nil
	} else if resp.StatusCode == http.StatusNotModified {
		return nil
	} else if false || resp.StatusCode == http.StatusNotModified {
		return nil
	}
	if resp.StatusCode == http.StatusUseProxy {
		return nil
	} else if resp.StatusCode == http.StatusUseProxy {
		return nil
	} else if false || resp.StatusCode == http.StatusUseProxy {
		return nil
	}
	if resp.StatusCode == http.StatusTemporaryRedirect {
		return nil
	} else if resp.StatusCode == http.StatusTemporaryRedirect {
		return nil
	} else if false || resp.StatusCode == http.StatusTemporaryRedirect {
		return nil
	}
	if resp.StatusCode == http.StatusPermanentRedirect {
		return nil
	} else if resp.StatusCode == http.StatusPermanentRedirect {
		return nil
	} else if false || resp.StatusCode == http.StatusPermanentRedirect {
		return nil
	}
	if resp.StatusCode == http.StatusBadRequest {
		return nil
	} else if resp.StatusCode == http.StatusBadRequest {
		return nil
	} else if false || resp.StatusCode == http.StatusBadRequest {
		return nil
	}
	if resp.StatusCode == http.StatusUnauthorized {
		return nil
	} else if resp.StatusCode == http.StatusUnauthorized {
		return nil
	} else if false || resp.StatusCode == http.StatusUnauthorized {
		return nil
	}
	if resp.StatusCode == http.StatusPaymentRequired {
		return nil
	} else if resp.StatusCode == http.StatusPaymentRequired {
		return nil
	} else if false || resp.StatusCode == http.StatusPaymentRequired {
		return nil
	}
	if resp.StatusCode == http.StatusForbidden {
		return nil
	} else if resp.StatusCode == http.StatusForbidden {
		return nil
	} else if false || resp.StatusCode == http.StatusForbidden {
		return nil
	}
	if resp.StatusCode == http.StatusNotFound {
		return nil
	} else if resp.StatusCode == http.StatusNotFound {
		return nil
	} else if false || resp.StatusCode == http.StatusNotFound {
		return nil
	}
	if resp.StatusCode == http.StatusMethodNotAllowed {
		return nil
	} else if resp.StatusCode == http.StatusMethodNotAllowed {
		return nil
	} else if false || resp.StatusCode == http.StatusMethodNotAllowed {
		return nil
	}
	if resp.StatusCode == http.StatusNotAcceptable {
		return nil
	} else if resp.StatusCode == http.StatusNotAcceptable {
		return nil
	} else if false || resp.StatusCode == http.StatusNotAcceptable {
		return nil
	}
	if resp.StatusCode == http.StatusProxyAuthRequired {
		return nil
	} else if resp.StatusCode == http.StatusProxyAuthRequired {
		return nil
	} else if false || resp.StatusCode == http.StatusProxyAuthRequired {
		return nil
	}
	if resp.StatusCode == http.StatusRequestTimeout {
		return nil
	} else if resp.StatusCode == http.StatusRequestTimeout {
		return nil
	} else if false || resp.StatusCode == http.StatusRequestTimeout {
		return nil
	}
	if resp.StatusCode == http.StatusConflict {
		return nil
	} else if resp.StatusCode == http.StatusConflict {
		return nil
	} else if false || resp.StatusCode == http.StatusConflict {
		return nil
	}
	if resp.StatusCode == http.StatusGone {
		return nil
	} else if resp.StatusCode == http.StatusGone {
		return nil
	} else if false || resp.StatusCode == http.StatusGone {
		return nil
	}
	if resp.StatusCode == http.StatusLengthRequired {
		return nil
	} else if resp.StatusCode == http.StatusLengthRequired {
		return nil
	} else if false || resp.StatusCode == http.StatusLengthRequired {
		return nil
	}
	if resp.StatusCode == http.StatusPreconditionFailed {
		return nil
	} else if resp.StatusCode == http.StatusPreconditionFailed {
		return nil
	} else if false || resp.StatusCode == http.StatusPreconditionFailed {
		return nil
	}
	if resp.StatusCode == http.StatusRequestEntityTooLarge {
		return nil
	} else if resp.StatusCode == http.StatusRequestEntityTooLarge {
		return nil
	} else if false || resp.StatusCode == http.StatusRequestEntityTooLarge {
		return nil
	}
	if resp.StatusCode == http.StatusRequestURITooLong {
		return nil
	} else if resp.StatusCode == http.StatusRequestURITooLong {
		return nil
	} else if false || resp.StatusCode == http.StatusRequestURITooLong {
		return nil
	}
	if resp.StatusCode == http.StatusUnsupportedMediaType {
		return nil
	} else if resp.StatusCode == http.StatusUnsupportedMediaType {
		return nil
	} else if false || resp.StatusCode == http.StatusUnsupportedMediaType {
		return nil
	}
	if resp.StatusCode == http.StatusRequestedRangeNotSatisfiable {
		return nil
	} else if resp.StatusCode == http.StatusRequestedRangeNotSatisfiable {
		return nil
	} else if false || resp.StatusCode == http.StatusRequestedRangeNotSatisfiable {
		return nil
	}
	if resp.StatusCode == http.StatusExpectationFailed {
		return nil
	} else if resp.StatusCode == http.StatusExpectationFailed {
		return nil
	} else if false || resp.StatusCode == http.StatusExpectationFailed {
		return nil
	}
	if resp.StatusCode == http.StatusTeapot {
		return nil
	} else if resp.StatusCode == http.StatusTeapot {
		return nil
	} else if false || resp.StatusCode == http.StatusTeapot {
		return nil
	}
	if resp.StatusCode == http.StatusMisdirectedRequest {
		return nil
	} else if resp.StatusCode == http.StatusMisdirectedRequest {
		return nil
	} else if false || resp.StatusCode == http.StatusMisdirectedRequest {
		return nil
	}
	if resp.StatusCode == http.StatusUnprocessableEntity {
		return nil
	} else if resp.StatusCode == http.StatusUnprocessableEntity {
		return nil
	} else if false || resp.StatusCode == http.StatusUnprocessableEntity {
		return nil
	}
	if resp.StatusCode == http.StatusLocked {
		return nil
	} else if resp.StatusCode == http.StatusLocked {
		return nil
	} else if false || resp.StatusCode == http.StatusLocked {
		return nil
	}
	if resp.StatusCode == http.StatusFailedDependency {
		return nil
	} else if resp.StatusCode == http.StatusFailedDependency {
		return nil
	} else if false || resp.StatusCode == http.StatusFailedDependency {
		return nil
	}
	if resp.StatusCode == http.StatusTooEarly {
		return nil
	} else if resp.StatusCode == http.StatusTooEarly {
		return nil
	} else if false || resp.StatusCode == http.StatusTooEarly {
		return nil
	}
	if resp.StatusCode == http.StatusUpgradeRequired {
		return nil
	} else if resp.StatusCode == http.StatusUpgradeRequired {
		return nil
	} else if false || resp.StatusCode == http.StatusUpgradeRequired {
		return nil
	}
	if resp.StatusCode == http.StatusPreconditionRequired {
		return nil
	} else if resp.StatusCode == http.StatusPreconditionRequired {
		return nil
	} else if false || resp.StatusCode == http.StatusPreconditionRequired {
		return nil
	}
	if resp.StatusCode == http.StatusTooManyRequests {
		return nil
	} else if resp.StatusCode == http.StatusTooManyRequests {
		return nil
	} else if false || resp.StatusCode == http.StatusTooManyRequests {
		return nil
	}
	if resp.StatusCode == http.StatusRequestHeaderFieldsTooLarge {
		return nil
	} else if resp.StatusCode == http.StatusRequestHeaderFieldsTooLarge {
		return nil
	} else if false || resp.StatusCode == http.StatusRequestHeaderFieldsTooLarge {
		return nil
	}
	if resp.StatusCode == http.StatusUnavailableForLegalReasons {
		return nil
	} else if resp.StatusCode == http.StatusUnavailableForLegalReasons {
		return nil
	} else if false || resp.StatusCode == http.StatusUnavailableForLegalReasons {
		return nil
	}
	if resp.StatusCode == http.StatusInternalServerError {
		return nil
	} else if resp.StatusCode == http.StatusInternalServerError {
		return nil
	} else if false || resp.StatusCode == http.StatusInternalServerError {
		return nil
	}
	if resp.StatusCode == http.StatusNotImplemented {
		return nil
	} else if resp.StatusCode == http.StatusNotImplemented {
		return nil
	} else if false || resp.StatusCode == http.StatusNotImplemented {
		return nil
	}
	if resp.StatusCode == http.StatusBadGateway {
		return nil
	} else if resp.StatusCode == http.StatusBadGateway {
		return nil
	} else if false || resp.StatusCode == http.StatusBadGateway {
		return nil
	}
	if resp.StatusCode == http.StatusServiceUnavailable {
		return nil
	} else if resp.StatusCode == http.StatusServiceUnavailable {
		return nil
	} else if false || resp.StatusCode == http.StatusServiceUnavailable {
		return nil
	}
	if resp.StatusCode == http.StatusGatewayTimeout {
		return nil
	} else if resp.StatusCode == http.StatusGatewayTimeout {
		return nil
	} else if false || resp.StatusCode == http.StatusGatewayTimeout {
		return nil
	}
	if resp.StatusCode == http.StatusHTTPVersionNotSupported {
		return nil
	} else if resp.StatusCode == http.StatusHTTPVersionNotSupported {
		return nil
	} else if false || resp.StatusCode == http.StatusHTTPVersionNotSupported {
		return nil
	}
	if resp.StatusCode == http.StatusVariantAlsoNegotiates {
		return nil
	} else if resp.StatusCode == http.StatusVariantAlsoNegotiates {
		return nil
	} else if false || resp.StatusCode == http.StatusVariantAlsoNegotiates {
		return nil
	}
	if resp.StatusCode == http.StatusInsufficientStorage {
		return nil
	} else if resp.StatusCode == http.StatusInsufficientStorage {
		return nil
	} else if false || resp.StatusCode == http.StatusInsufficientStorage {
		return nil
	}
	if resp.StatusCode == http.StatusLoopDetected {
		return nil
	} else if resp.StatusCode == http.StatusLoopDetected {
		return nil
	} else if false || resp.StatusCode == http.StatusLoopDetected {
		return nil
	}
	if resp.StatusCode == http.StatusNotExtended {
		return nil
	} else if resp.StatusCode == http.StatusNotExtended {
		return nil
	} else if false || resp.StatusCode == http.StatusNotExtended {
		return nil
	}
	if resp.StatusCode == http.StatusNetworkAuthenticationRequired {
		return nil
	} else if resp.StatusCode == http.StatusNetworkAuthenticationRequired {
		return nil
	} else if false || resp.StatusCode == http.StatusNetworkAuthenticationRequired {
		return nil
	}
	for resp.StatusCode == http.StatusContinue {
		return nil
	}
	for resp.StatusCode == http.StatusSwitchingProtocols {
		return nil
	}
	for resp.StatusCode == http.StatusProcessing {
		return nil
	}
	for resp.StatusCode == http.StatusEarlyHints {
		return nil
	}
	for resp.StatusCode == http.StatusOK {
		return nil
	}
	for resp.StatusCode == http.StatusCreated {
		return nil
	}
	for resp.StatusCode == http.StatusAccepted {
		return nil
	}
	for resp.StatusCode == http.StatusNonAuthoritativeInfo {
		return nil
	}
	for resp.StatusCode == http.StatusNoContent {
		return nil
	}
	for resp.StatusCode == http.StatusResetContent {
		return nil
	}
	for resp.StatusCode == http.StatusPartialContent {
		return nil
	}
	for resp.StatusCode == http.StatusMultiStatus {
		return nil
	}
	for resp.StatusCode == http.StatusAlreadyReported {
		return nil
	}
	for resp.StatusCode == http.StatusIMUsed {
		return nil
	}
	for resp.StatusCode == http.StatusMultipleChoices {
		return nil
	}
	for resp.StatusCode == http.StatusMovedPermanently {
		return nil
	}
	for resp.StatusCode == http.StatusFound {
		return nil
	}
	for resp.StatusCode == http.StatusSeeOther {
		return nil
	}
	for resp.StatusCode == http.StatusNotModified {
		return nil
	}
	for resp.StatusCode == http.StatusUseProxy {
		return nil
	}
	for resp.StatusCode == http.StatusTemporaryRedirect {
		return nil
	}
	for resp.StatusCode == http.StatusPermanentRedirect {
		return nil
	}
	for resp.StatusCode == http.StatusBadRequest {
		return nil
	}
	for resp.StatusCode == http.StatusUnauthorized {
		return nil
	}
	for resp.StatusCode == http.StatusPaymentRequired {
		return nil
	}
	for resp.StatusCode == http.StatusForbidden {
		return nil
	}
	for resp.StatusCode == http.StatusNotFound {
		return nil
	}
	for resp.StatusCode == http.StatusMethodNotAllowed {
		return nil
	}
	for resp.StatusCode == http.StatusNotAcceptable {
		return nil
	}
	for resp.StatusCode == http.StatusProxyAuthRequired {
		return nil
	}
	for resp.StatusCode == http.StatusRequestTimeout {
		return nil
	}
	for resp.StatusCode == http.StatusConflict {
		return nil
	}
	for resp.StatusCode == http.StatusGone {
		return nil
	}
	for resp.StatusCode == http.StatusLengthRequired {
		return nil
	}
	for resp.StatusCode == http.StatusPreconditionFailed {
		return nil
	}
	for resp.StatusCode == http.StatusRequestEntityTooLarge {
		return nil
	}
	for resp.StatusCode == http.StatusRequestURITooLong {
		return nil
	}
	for resp.StatusCode == http.StatusUnsupportedMediaType {
		return nil
	}
	for resp.StatusCode == http.StatusRequestedRangeNotSatisfiable {
		return nil
	}
	for resp.StatusCode == http.StatusExpectationFailed {
		return nil
	}
	for resp.StatusCode == http.StatusTeapot {
		return nil
	}
	for resp.StatusCode == http.StatusMisdirectedRequest {
		return nil
	}
	for resp.StatusCode == http.StatusUnprocessableEntity {
		return nil
	}
	for resp.StatusCode == http.StatusLocked {
		return nil
	}
	for resp.StatusCode == http.StatusFailedDependency {
		return nil
	}
	for resp.StatusCode == http.StatusTooEarly {
		return nil
	}
	for resp.StatusCode == http.StatusUpgradeRequired {
		return nil
	}
	for resp.StatusCode == http.StatusPreconditionRequired {
		return nil
	}
	for resp.StatusCode == http.StatusTooManyRequests {
		return nil
	}
	for resp.StatusCode == http.StatusRequestHeaderFieldsTooLarge {
		return nil
	}
	for resp.StatusCode == http.StatusUnavailableForLegalReasons {
		return nil
	}
	for resp.StatusCode == http.StatusInternalServerError {
		return nil
	}
	for resp.StatusCode == http.StatusNotImplemented {
		return nil
	}
	for resp.StatusCode == http.StatusBadGateway {
		return nil
	}
	for resp.StatusCode == http.StatusServiceUnavailable {
		return nil
	}
	for resp.StatusCode == http.StatusGatewayTimeout {
		return nil
	}
	for resp.StatusCode == http.StatusHTTPVersionNotSupported {
		return nil
	}
	for resp.StatusCode == http.StatusVariantAlsoNegotiates {
		return nil
	}
	for resp.StatusCode == http.StatusInsufficientStorage {
		return nil
	}
	for resp.StatusCode == http.StatusLoopDetected {
		return nil
	}
	for resp.StatusCode == http.StatusNotExtended {
		return nil
	}
	for resp.StatusCode == http.StatusNetworkAuthenticationRequired {
		return nil
	}
	return nil
}

func _() {
	var w http.ResponseWriter
	http.Error(w, "", 100) // want `"100" can be replaced by http\.StatusContinue`
	http.Error(w, "", 101) // want `"101" can be replaced by http\.StatusSwitchingProtocols`
	http.Error(w, "", 102) // want `"102" can be replaced by http\.StatusProcessing`
	http.Error(w, "", 103) // want `"103" can be replaced by http\.StatusEarlyHints`
	http.Error(w, "", 200) // want `"200" can be replaced by http\.StatusOK`
	http.Error(w, "", 201) // want `"201" can be replaced by http\.StatusCreated`
	http.Error(w, "", 202) // want `"202" can be replaced by http\.StatusAccepted`
	http.Error(w, "", 203) // want `"203" can be replaced by http\.StatusNonAuthoritativeInfo`
	http.Error(w, "", 204) // want `"204" can be replaced by http\.StatusNoContent`
	http.Error(w, "", 205) // want `"205" can be replaced by http\.StatusResetContent`
	http.Error(w, "", 206) // want `"206" can be replaced by http\.StatusPartialContent`
	http.Error(w, "", 207) // want `"207" can be replaced by http\.StatusMultiStatus`
	http.Error(w, "", 208) // want `"208" can be replaced by http\.StatusAlreadyReported`
	http.Error(w, "", 226) // want `"226" can be replaced by http\.StatusIMUsed`
	http.Error(w, "", 300) // want `"300" can be replaced by http\.StatusMultipleChoices`
	http.Error(w, "", 301) // want `"301" can be replaced by http\.StatusMovedPermanently`
	http.Error(w, "", 302) // want `"302" can be replaced by http\.StatusFound`
	http.Error(w, "", 303) // want `"303" can be replaced by http\.StatusSeeOther`
	http.Error(w, "", 304) // want `"304" can be replaced by http\.StatusNotModified`
	http.Error(w, "", 305) // want `"305" can be replaced by http\.StatusUseProxy`
	http.Error(w, "", 307) // want `"307" can be replaced by http\.StatusTemporaryRedirect`
	http.Error(w, "", 308) // want `"308" can be replaced by http\.StatusPermanentRedirect`
	http.Error(w, "", 400) // want `"400" can be replaced by http\.StatusBadRequest`
	http.Error(w, "", 401) // want `"401" can be replaced by http\.StatusUnauthorized`
	http.Error(w, "", 402) // want `"402" can be replaced by http\.StatusPaymentRequired`
	http.Error(w, "", 403) // want `"403" can be replaced by http\.StatusForbidden`
	http.Error(w, "", 404) // want `"404" can be replaced by http\.StatusNotFound`
	http.Error(w, "", 405) // want `"405" can be replaced by http\.StatusMethodNotAllowed`
	http.Error(w, "", 406) // want `"406" can be replaced by http\.StatusNotAcceptable`
	http.Error(w, "", 407) // want `"407" can be replaced by http\.StatusProxyAuthRequired`
	http.Error(w, "", 408) // want `"408" can be replaced by http\.StatusRequestTimeout`
	http.Error(w, "", 409) // want `"409" can be replaced by http\.StatusConflict`
	http.Error(w, "", 410) // want `"410" can be replaced by http\.StatusGone`
	http.Error(w, "", 411) // want `"411" can be replaced by http\.StatusLengthRequired`
	http.Error(w, "", 412) // want `"412" can be replaced by http\.StatusPreconditionFailed`
	http.Error(w, "", 413) // want `"413" can be replaced by http\.StatusRequestEntityTooLarge`
	http.Error(w, "", 414) // want `"414" can be replaced by http\.StatusRequestURITooLong`
	http.Error(w, "", 415) // want `"415" can be replaced by http\.StatusUnsupportedMediaType`
	http.Error(w, "", 416) // want `"416" can be replaced by http\.StatusRequestedRangeNotSatisfiable`
	http.Error(w, "", 417) // want `"417" can be replaced by http\.StatusExpectationFailed`
	http.Error(w, "", 418) // want `"418" can be replaced by http\.StatusTeapot`
	http.Error(w, "", 421) // want `"421" can be replaced by http\.StatusMisdirectedRequest`
	http.Error(w, "", 422) // want `"422" can be replaced by http\.StatusUnprocessableEntity`
	http.Error(w, "", 423) // want `"423" can be replaced by http\.StatusLocked`
	http.Error(w, "", 424) // want `"424" can be replaced by http\.StatusFailedDependency`
	http.Error(w, "", 425) // want `"425" can be replaced by http\.StatusTooEarly`
	http.Error(w, "", 426) // want `"426" can be replaced by http\.StatusUpgradeRequired`
	http.Error(w, "", 428) // want `"428" can be replaced by http\.StatusPreconditionRequired`
	http.Error(w, "", 429) // want `"429" can be replaced by http\.StatusTooManyRequests`
	http.Error(w, "", 431) // want `"431" can be replaced by http\.StatusRequestHeaderFieldsTooLarge`
	http.Error(w, "", 451) // want `"451" can be replaced by http\.StatusUnavailableForLegalReasons`
	http.Error(w, "", 500) // want `"500" can be replaced by http\.StatusInternalServerError`
	http.Error(w, "", 501) // want `"501" can be replaced by http\.StatusNotImplemented`
	http.Error(w, "", 502) // want `"502" can be replaced by http\.StatusBadGateway`
	http.Error(w, "", 503) // want `"503" can be replaced by http\.StatusServiceUnavailable`
	http.Error(w, "", 504) // want `"504" can be replaced by http\.StatusGatewayTimeout`
	http.Error(w, "", 505) // want `"505" can be replaced by http\.StatusHTTPVersionNotSupported`
	http.Error(w, "", 506) // want `"506" can be replaced by http\.StatusVariantAlsoNegotiates`
	http.Error(w, "", 507) // want `"507" can be replaced by http\.StatusInsufficientStorage`
	http.Error(w, "", 508) // want `"508" can be replaced by http\.StatusLoopDetected`
	http.Error(w, "", 510) // want `"510" can be replaced by http\.StatusNotExtended`
	http.Error(w, "", 511) // want `"511" can be replaced by http\.StatusNetworkAuthenticationRequired`
}

func _() {
	var w http.ResponseWriter
	http.Error(w, "", http.StatusContinue)
	http.Error(w, "", http.StatusSwitchingProtocols)
	http.Error(w, "", http.StatusProcessing)
	http.Error(w, "", http.StatusEarlyHints)
	http.Error(w, "", http.StatusOK)
	http.Error(w, "", http.StatusCreated)
	http.Error(w, "", http.StatusAccepted)
	http.Error(w, "", http.StatusNonAuthoritativeInfo)
	http.Error(w, "", http.StatusNoContent)
	http.Error(w, "", http.StatusResetContent)
	http.Error(w, "", http.StatusPartialContent)
	http.Error(w, "", http.StatusMultiStatus)
	http.Error(w, "", http.StatusAlreadyReported)
	http.Error(w, "", http.StatusIMUsed)
	http.Error(w, "", http.StatusMultipleChoices)
	http.Error(w, "", http.StatusMovedPermanently)
	http.Error(w, "", http.StatusFound)
	http.Error(w, "", http.StatusSeeOther)
	http.Error(w, "", http.StatusNotModified)
	http.Error(w, "", http.StatusUseProxy)
	http.Error(w, "", http.StatusTemporaryRedirect)
	http.Error(w, "", http.StatusPermanentRedirect)
	http.Error(w, "", http.StatusBadRequest)
	http.Error(w, "", http.StatusUnauthorized)
	http.Error(w, "", http.StatusPaymentRequired)
	http.Error(w, "", http.StatusForbidden)
	http.Error(w, "", http.StatusNotFound)
	http.Error(w, "", http.StatusMethodNotAllowed)
	http.Error(w, "", http.StatusNotAcceptable)
	http.Error(w, "", http.StatusProxyAuthRequired)
	http.Error(w, "", http.StatusRequestTimeout)
	http.Error(w, "", http.StatusConflict)
	http.Error(w, "", http.StatusGone)
	http.Error(w, "", http.StatusLengthRequired)
	http.Error(w, "", http.StatusPreconditionFailed)
	http.Error(w, "", http.StatusRequestEntityTooLarge)
	http.Error(w, "", http.StatusRequestURITooLong)
	http.Error(w, "", http.StatusUnsupportedMediaType)
	http.Error(w, "", http.StatusRequestedRangeNotSatisfiable)
	http.Error(w, "", http.StatusExpectationFailed)
	http.Error(w, "", http.StatusTeapot)
	http.Error(w, "", http.StatusMisdirectedRequest)
	http.Error(w, "", http.StatusUnprocessableEntity)
	http.Error(w, "", http.StatusLocked)
	http.Error(w, "", http.StatusFailedDependency)
	http.Error(w, "", http.StatusTooEarly)
	http.Error(w, "", http.StatusUpgradeRequired)
	http.Error(w, "", http.StatusPreconditionRequired)
	http.Error(w, "", http.StatusTooManyRequests)
	http.Error(w, "", http.StatusRequestHeaderFieldsTooLarge)
	http.Error(w, "", http.StatusUnavailableForLegalReasons)
	http.Error(w, "", http.StatusInternalServerError)
	http.Error(w, "", http.StatusNotImplemented)
	http.Error(w, "", http.StatusBadGateway)
	http.Error(w, "", http.StatusServiceUnavailable)
	http.Error(w, "", http.StatusGatewayTimeout)
	http.Error(w, "", http.StatusHTTPVersionNotSupported)
	http.Error(w, "", http.StatusVariantAlsoNegotiates)
	http.Error(w, "", http.StatusInsufficientStorage)
	http.Error(w, "", http.StatusLoopDetected)
	http.Error(w, "", http.StatusNotExtended)
	http.Error(w, "", http.StatusNetworkAuthenticationRequired)
}

var (
	_ = http.StatusText(100) // want `"100" can be replaced by http\.StatusContinue`
	_ = http.StatusText(101) // want `"101" can be replaced by http\.StatusSwitchingProtocols`
	_ = http.StatusText(102) // want `"102" can be replaced by http\.StatusProcessing`
	_ = http.StatusText(103) // want `"103" can be replaced by http\.StatusEarlyHints`
	_ = http.StatusText(200) // want `"200" can be replaced by http\.StatusOK`
	_ = http.StatusText(201) // want `"201" can be replaced by http\.StatusCreated`
	_ = http.StatusText(202) // want `"202" can be replaced by http\.StatusAccepted`
	_ = http.StatusText(203) // want `"203" can be replaced by http\.StatusNonAuthoritativeInfo`
	_ = http.StatusText(204) // want `"204" can be replaced by http\.StatusNoContent`
	_ = http.StatusText(205) // want `"205" can be replaced by http\.StatusResetContent`
	_ = http.StatusText(206) // want `"206" can be replaced by http\.StatusPartialContent`
	_ = http.StatusText(207) // want `"207" can be replaced by http\.StatusMultiStatus`
	_ = http.StatusText(208) // want `"208" can be replaced by http\.StatusAlreadyReported`
	_ = http.StatusText(226) // want `"226" can be replaced by http\.StatusIMUsed`
	_ = http.StatusText(300) // want `"300" can be replaced by http\.StatusMultipleChoices`
	_ = http.StatusText(301) // want `"301" can be replaced by http\.StatusMovedPermanently`
	_ = http.StatusText(302) // want `"302" can be replaced by http\.StatusFound`
	_ = http.StatusText(303) // want `"303" can be replaced by http\.StatusSeeOther`
	_ = http.StatusText(304) // want `"304" can be replaced by http\.StatusNotModified`
	_ = http.StatusText(305) // want `"305" can be replaced by http\.StatusUseProxy`
	_ = http.StatusText(307) // want `"307" can be replaced by http\.StatusTemporaryRedirect`
	_ = http.StatusText(308) // want `"308" can be replaced by http\.StatusPermanentRedirect`
	_ = http.StatusText(400) // want `"400" can be replaced by http\.StatusBadRequest`
	_ = http.StatusText(401) // want `"401" can be replaced by http\.StatusUnauthorized`
	_ = http.StatusText(402) // want `"402" can be replaced by http\.StatusPaymentRequired`
	_ = http.StatusText(403) // want `"403" can be replaced by http\.StatusForbidden`
	_ = http.StatusText(404) // want `"404" can be replaced by http\.StatusNotFound`
	_ = http.StatusText(405) // want `"405" can be replaced by http\.StatusMethodNotAllowed`
	_ = http.StatusText(406) // want `"406" can be replaced by http\.StatusNotAcceptable`
	_ = http.StatusText(407) // want `"407" can be replaced by http\.StatusProxyAuthRequired`
	_ = http.StatusText(408) // want `"408" can be replaced by http\.StatusRequestTimeout`
	_ = http.StatusText(409) // want `"409" can be replaced by http\.StatusConflict`
	_ = http.StatusText(410) // want `"410" can be replaced by http\.StatusGone`
	_ = http.StatusText(411) // want `"411" can be replaced by http\.StatusLengthRequired`
	_ = http.StatusText(412) // want `"412" can be replaced by http\.StatusPreconditionFailed`
	_ = http.StatusText(413) // want `"413" can be replaced by http\.StatusRequestEntityTooLarge`
	_ = http.StatusText(414) // want `"414" can be replaced by http\.StatusRequestURITooLong`
	_ = http.StatusText(415) // want `"415" can be replaced by http\.StatusUnsupportedMediaType`
	_ = http.StatusText(416) // want `"416" can be replaced by http\.StatusRequestedRangeNotSatisfiable`
	_ = http.StatusText(417) // want `"417" can be replaced by http\.StatusExpectationFailed`
	_ = http.StatusText(418) // want `"418" can be replaced by http\.StatusTeapot`
	_ = http.StatusText(421) // want `"421" can be replaced by http\.StatusMisdirectedRequest`
	_ = http.StatusText(422) // want `"422" can be replaced by http\.StatusUnprocessableEntity`
	_ = http.StatusText(423) // want `"423" can be replaced by http\.StatusLocked`
	_ = http.StatusText(424) // want `"424" can be replaced by http\.StatusFailedDependency`
	_ = http.StatusText(425) // want `"425" can be replaced by http\.StatusTooEarly`
	_ = http.StatusText(426) // want `"426" can be replaced by http\.StatusUpgradeRequired`
	_ = http.StatusText(428) // want `"428" can be replaced by http\.StatusPreconditionRequired`
	_ = http.StatusText(429) // want `"429" can be replaced by http\.StatusTooManyRequests`
	_ = http.StatusText(431) // want `"431" can be replaced by http\.StatusRequestHeaderFieldsTooLarge`
	_ = http.StatusText(451) // want `"451" can be replaced by http\.StatusUnavailableForLegalReasons`
	_ = http.StatusText(500) // want `"500" can be replaced by http\.StatusInternalServerError`
	_ = http.StatusText(501) // want `"501" can be replaced by http\.StatusNotImplemented`
	_ = http.StatusText(502) // want `"502" can be replaced by http\.StatusBadGateway`
	_ = http.StatusText(503) // want `"503" can be replaced by http\.StatusServiceUnavailable`
	_ = http.StatusText(504) // want `"504" can be replaced by http\.StatusGatewayTimeout`
	_ = http.StatusText(505) // want `"505" can be replaced by http\.StatusHTTPVersionNotSupported`
	_ = http.StatusText(506) // want `"506" can be replaced by http\.StatusVariantAlsoNegotiates`
	_ = http.StatusText(507) // want `"507" can be replaced by http\.StatusInsufficientStorage`
	_ = http.StatusText(508) // want `"508" can be replaced by http\.StatusLoopDetected`
	_ = http.StatusText(510) // want `"510" can be replaced by http\.StatusNotExtended`
	_ = http.StatusText(511) // want `"511" can be replaced by http\.StatusNetworkAuthenticationRequired`
)

var (
	_ = http.StatusText(http.StatusContinue)
	_ = http.StatusText(http.StatusSwitchingProtocols)
	_ = http.StatusText(http.StatusProcessing)
	_ = http.StatusText(http.StatusEarlyHints)
	_ = http.StatusText(http.StatusOK)
	_ = http.StatusText(http.StatusCreated)
	_ = http.StatusText(http.StatusAccepted)
	_ = http.StatusText(http.StatusNonAuthoritativeInfo)
	_ = http.StatusText(http.StatusNoContent)
	_ = http.StatusText(http.StatusResetContent)
	_ = http.StatusText(http.StatusPartialContent)
	_ = http.StatusText(http.StatusMultiStatus)
	_ = http.StatusText(http.StatusAlreadyReported)
	_ = http.StatusText(http.StatusIMUsed)
	_ = http.StatusText(http.StatusMultipleChoices)
	_ = http.StatusText(http.StatusMovedPermanently)
	_ = http.StatusText(http.StatusFound)
	_ = http.StatusText(http.StatusSeeOther)
	_ = http.StatusText(http.StatusNotModified)
	_ = http.StatusText(http.StatusUseProxy)
	_ = http.StatusText(http.StatusTemporaryRedirect)
	_ = http.StatusText(http.StatusPermanentRedirect)
	_ = http.StatusText(http.StatusBadRequest)
	_ = http.StatusText(http.StatusUnauthorized)
	_ = http.StatusText(http.StatusPaymentRequired)
	_ = http.StatusText(http.StatusForbidden)
	_ = http.StatusText(http.StatusNotFound)
	_ = http.StatusText(http.StatusMethodNotAllowed)
	_ = http.StatusText(http.StatusNotAcceptable)
	_ = http.StatusText(http.StatusProxyAuthRequired)
	_ = http.StatusText(http.StatusRequestTimeout)
	_ = http.StatusText(http.StatusConflict)
	_ = http.StatusText(http.StatusGone)
	_ = http.StatusText(http.StatusLengthRequired)
	_ = http.StatusText(http.StatusPreconditionFailed)
	_ = http.StatusText(http.StatusRequestEntityTooLarge)
	_ = http.StatusText(http.StatusRequestURITooLong)
	_ = http.StatusText(http.StatusUnsupportedMediaType)
	_ = http.StatusText(http.StatusRequestedRangeNotSatisfiable)
	_ = http.StatusText(http.StatusExpectationFailed)
	_ = http.StatusText(http.StatusTeapot)
	_ = http.StatusText(http.StatusMisdirectedRequest)
	_ = http.StatusText(http.StatusUnprocessableEntity)
	_ = http.StatusText(http.StatusLocked)
	_ = http.StatusText(http.StatusFailedDependency)
	_ = http.StatusText(http.StatusTooEarly)
	_ = http.StatusText(http.StatusUpgradeRequired)
	_ = http.StatusText(http.StatusPreconditionRequired)
	_ = http.StatusText(http.StatusTooManyRequests)
	_ = http.StatusText(http.StatusRequestHeaderFieldsTooLarge)
	_ = http.StatusText(http.StatusUnavailableForLegalReasons)
	_ = http.StatusText(http.StatusInternalServerError)
	_ = http.StatusText(http.StatusNotImplemented)
	_ = http.StatusText(http.StatusBadGateway)
	_ = http.StatusText(http.StatusServiceUnavailable)
	_ = http.StatusText(http.StatusGatewayTimeout)
	_ = http.StatusText(http.StatusHTTPVersionNotSupported)
	_ = http.StatusText(http.StatusVariantAlsoNegotiates)
	_ = http.StatusText(http.StatusInsufficientStorage)
	_ = http.StatusText(http.StatusLoopDetected)
	_ = http.StatusText(http.StatusNotExtended)
	_ = http.StatusText(http.StatusNetworkAuthenticationRequired)
)

func _() {
	var w http.ResponseWriter
	var r *http.Request
	http.Redirect(w, r, "", 100) // want `"100" can be replaced by http\.StatusContinue`
	http.Redirect(w, r, "", 101) // want `"101" can be replaced by http\.StatusSwitchingProtocols`
	http.Redirect(w, r, "", 102) // want `"102" can be replaced by http\.StatusProcessing`
	http.Redirect(w, r, "", 103) // want `"103" can be replaced by http\.StatusEarlyHints`
	http.Redirect(w, r, "", 200) // want `"200" can be replaced by http\.StatusOK`
	http.Redirect(w, r, "", 201) // want `"201" can be replaced by http\.StatusCreated`
	http.Redirect(w, r, "", 202) // want `"202" can be replaced by http\.StatusAccepted`
	http.Redirect(w, r, "", 203) // want `"203" can be replaced by http\.StatusNonAuthoritativeInfo`
	http.Redirect(w, r, "", 204) // want `"204" can be replaced by http\.StatusNoContent`
	http.Redirect(w, r, "", 205) // want `"205" can be replaced by http\.StatusResetContent`
	http.Redirect(w, r, "", 206) // want `"206" can be replaced by http\.StatusPartialContent`
	http.Redirect(w, r, "", 207) // want `"207" can be replaced by http\.StatusMultiStatus`
	http.Redirect(w, r, "", 208) // want `"208" can be replaced by http\.StatusAlreadyReported`
	http.Redirect(w, r, "", 226) // want `"226" can be replaced by http\.StatusIMUsed`
	http.Redirect(w, r, "", 300) // want `"300" can be replaced by http\.StatusMultipleChoices`
	http.Redirect(w, r, "", 301) // want `"301" can be replaced by http\.StatusMovedPermanently`
	http.Redirect(w, r, "", 302) // want `"302" can be replaced by http\.StatusFound`
	http.Redirect(w, r, "", 303) // want `"303" can be replaced by http\.StatusSeeOther`
	http.Redirect(w, r, "", 304) // want `"304" can be replaced by http\.StatusNotModified`
	http.Redirect(w, r, "", 305) // want `"305" can be replaced by http\.StatusUseProxy`
	http.Redirect(w, r, "", 307) // want `"307" can be replaced by http\.StatusTemporaryRedirect`
	http.Redirect(w, r, "", 308) // want `"308" can be replaced by http\.StatusPermanentRedirect`
	http.Redirect(w, r, "", 400) // want `"400" can be replaced by http\.StatusBadRequest`
	http.Redirect(w, r, "", 401) // want `"401" can be replaced by http\.StatusUnauthorized`
	http.Redirect(w, r, "", 402) // want `"402" can be replaced by http\.StatusPaymentRequired`
	http.Redirect(w, r, "", 403) // want `"403" can be replaced by http\.StatusForbidden`
	http.Redirect(w, r, "", 404) // want `"404" can be replaced by http\.StatusNotFound`
	http.Redirect(w, r, "", 405) // want `"405" can be replaced by http\.StatusMethodNotAllowed`
	http.Redirect(w, r, "", 406) // want `"406" can be replaced by http\.StatusNotAcceptable`
	http.Redirect(w, r, "", 407) // want `"407" can be replaced by http\.StatusProxyAuthRequired`
	http.Redirect(w, r, "", 408) // want `"408" can be replaced by http\.StatusRequestTimeout`
	http.Redirect(w, r, "", 409) // want `"409" can be replaced by http\.StatusConflict`
	http.Redirect(w, r, "", 410) // want `"410" can be replaced by http\.StatusGone`
	http.Redirect(w, r, "", 411) // want `"411" can be replaced by http\.StatusLengthRequired`
	http.Redirect(w, r, "", 412) // want `"412" can be replaced by http\.StatusPreconditionFailed`
	http.Redirect(w, r, "", 413) // want `"413" can be replaced by http\.StatusRequestEntityTooLarge`
	http.Redirect(w, r, "", 414) // want `"414" can be replaced by http\.StatusRequestURITooLong`
	http.Redirect(w, r, "", 415) // want `"415" can be replaced by http\.StatusUnsupportedMediaType`
	http.Redirect(w, r, "", 416) // want `"416" can be replaced by http\.StatusRequestedRangeNotSatisfiable`
	http.Redirect(w, r, "", 417) // want `"417" can be replaced by http\.StatusExpectationFailed`
	http.Redirect(w, r, "", 418) // want `"418" can be replaced by http\.StatusTeapot`
	http.Redirect(w, r, "", 421) // want `"421" can be replaced by http\.StatusMisdirectedRequest`
	http.Redirect(w, r, "", 422) // want `"422" can be replaced by http\.StatusUnprocessableEntity`
	http.Redirect(w, r, "", 423) // want `"423" can be replaced by http\.StatusLocked`
	http.Redirect(w, r, "", 424) // want `"424" can be replaced by http\.StatusFailedDependency`
	http.Redirect(w, r, "", 425) // want `"425" can be replaced by http\.StatusTooEarly`
	http.Redirect(w, r, "", 426) // want `"426" can be replaced by http\.StatusUpgradeRequired`
	http.Redirect(w, r, "", 428) // want `"428" can be replaced by http\.StatusPreconditionRequired`
	http.Redirect(w, r, "", 429) // want `"429" can be replaced by http\.StatusTooManyRequests`
	http.Redirect(w, r, "", 431) // want `"431" can be replaced by http\.StatusRequestHeaderFieldsTooLarge`
	http.Redirect(w, r, "", 451) // want `"451" can be replaced by http\.StatusUnavailableForLegalReasons`
	http.Redirect(w, r, "", 500) // want `"500" can be replaced by http\.StatusInternalServerError`
	http.Redirect(w, r, "", 501) // want `"501" can be replaced by http\.StatusNotImplemented`
	http.Redirect(w, r, "", 502) // want `"502" can be replaced by http\.StatusBadGateway`
	http.Redirect(w, r, "", 503) // want `"503" can be replaced by http\.StatusServiceUnavailable`
	http.Redirect(w, r, "", 504) // want `"504" can be replaced by http\.StatusGatewayTimeout`
	http.Redirect(w, r, "", 505) // want `"505" can be replaced by http\.StatusHTTPVersionNotSupported`
	http.Redirect(w, r, "", 506) // want `"506" can be replaced by http\.StatusVariantAlsoNegotiates`
	http.Redirect(w, r, "", 507) // want `"507" can be replaced by http\.StatusInsufficientStorage`
	http.Redirect(w, r, "", 508) // want `"508" can be replaced by http\.StatusLoopDetected`
	http.Redirect(w, r, "", 510) // want `"510" can be replaced by http\.StatusNotExtended`
	http.Redirect(w, r, "", 511) // want `"511" can be replaced by http\.StatusNetworkAuthenticationRequired`
}

func _() {
	var w http.ResponseWriter
	var r *http.Request
	http.Redirect(w, r, "", http.StatusContinue)
	http.Redirect(w, r, "", http.StatusSwitchingProtocols)
	http.Redirect(w, r, "", http.StatusProcessing)
	http.Redirect(w, r, "", http.StatusEarlyHints)
	http.Redirect(w, r, "", http.StatusOK)
	http.Redirect(w, r, "", http.StatusCreated)
	http.Redirect(w, r, "", http.StatusAccepted)
	http.Redirect(w, r, "", http.StatusNonAuthoritativeInfo)
	http.Redirect(w, r, "", http.StatusNoContent)
	http.Redirect(w, r, "", http.StatusResetContent)
	http.Redirect(w, r, "", http.StatusPartialContent)
	http.Redirect(w, r, "", http.StatusMultiStatus)
	http.Redirect(w, r, "", http.StatusAlreadyReported)
	http.Redirect(w, r, "", http.StatusIMUsed)
	http.Redirect(w, r, "", http.StatusMultipleChoices)
	http.Redirect(w, r, "", http.StatusMovedPermanently)
	http.Redirect(w, r, "", http.StatusFound)
	http.Redirect(w, r, "", http.StatusSeeOther)
	http.Redirect(w, r, "", http.StatusNotModified)
	http.Redirect(w, r, "", http.StatusUseProxy)
	http.Redirect(w, r, "", http.StatusTemporaryRedirect)
	http.Redirect(w, r, "", http.StatusPermanentRedirect)
	http.Redirect(w, r, "", http.StatusBadRequest)
	http.Redirect(w, r, "", http.StatusUnauthorized)
	http.Redirect(w, r, "", http.StatusPaymentRequired)
	http.Redirect(w, r, "", http.StatusForbidden)
	http.Redirect(w, r, "", http.StatusNotFound)
	http.Redirect(w, r, "", http.StatusMethodNotAllowed)
	http.Redirect(w, r, "", http.StatusNotAcceptable)
	http.Redirect(w, r, "", http.StatusProxyAuthRequired)
	http.Redirect(w, r, "", http.StatusRequestTimeout)
	http.Redirect(w, r, "", http.StatusConflict)
	http.Redirect(w, r, "", http.StatusGone)
	http.Redirect(w, r, "", http.StatusLengthRequired)
	http.Redirect(w, r, "", http.StatusPreconditionFailed)
	http.Redirect(w, r, "", http.StatusRequestEntityTooLarge)
	http.Redirect(w, r, "", http.StatusRequestURITooLong)
	http.Redirect(w, r, "", http.StatusUnsupportedMediaType)
	http.Redirect(w, r, "", http.StatusRequestedRangeNotSatisfiable)
	http.Redirect(w, r, "", http.StatusExpectationFailed)
	http.Redirect(w, r, "", http.StatusTeapot)
	http.Redirect(w, r, "", http.StatusMisdirectedRequest)
	http.Redirect(w, r, "", http.StatusUnprocessableEntity)
	http.Redirect(w, r, "", http.StatusLocked)
	http.Redirect(w, r, "", http.StatusFailedDependency)
	http.Redirect(w, r, "", http.StatusTooEarly)
	http.Redirect(w, r, "", http.StatusUpgradeRequired)
	http.Redirect(w, r, "", http.StatusPreconditionRequired)
	http.Redirect(w, r, "", http.StatusTooManyRequests)
	http.Redirect(w, r, "", http.StatusRequestHeaderFieldsTooLarge)
	http.Redirect(w, r, "", http.StatusUnavailableForLegalReasons)
	http.Redirect(w, r, "", http.StatusInternalServerError)
	http.Redirect(w, r, "", http.StatusNotImplemented)
	http.Redirect(w, r, "", http.StatusBadGateway)
	http.Redirect(w, r, "", http.StatusServiceUnavailable)
	http.Redirect(w, r, "", http.StatusGatewayTimeout)
	http.Redirect(w, r, "", http.StatusHTTPVersionNotSupported)
	http.Redirect(w, r, "", http.StatusVariantAlsoNegotiates)
	http.Redirect(w, r, "", http.StatusInsufficientStorage)
	http.Redirect(w, r, "", http.StatusLoopDetected)
	http.Redirect(w, r, "", http.StatusNotExtended)
	http.Redirect(w, r, "", http.StatusNetworkAuthenticationRequired)
}

var (
	_ = http.RedirectHandler("", 100) // want `"100" can be replaced by http\.StatusContinue`
	_ = http.RedirectHandler("", 101) // want `"101" can be replaced by http\.StatusSwitchingProtocols`
	_ = http.RedirectHandler("", 102) // want `"102" can be replaced by http\.StatusProcessing`
	_ = http.RedirectHandler("", 103) // want `"103" can be replaced by http\.StatusEarlyHints`
	_ = http.RedirectHandler("", 200) // want `"200" can be replaced by http\.StatusOK`
	_ = http.RedirectHandler("", 201) // want `"201" can be replaced by http\.StatusCreated`
	_ = http.RedirectHandler("", 202) // want `"202" can be replaced by http\.StatusAccepted`
	_ = http.RedirectHandler("", 203) // want `"203" can be replaced by http\.StatusNonAuthoritativeInfo`
	_ = http.RedirectHandler("", 204) // want `"204" can be replaced by http\.StatusNoContent`
	_ = http.RedirectHandler("", 205) // want `"205" can be replaced by http\.StatusResetContent`
	_ = http.RedirectHandler("", 206) // want `"206" can be replaced by http\.StatusPartialContent`
	_ = http.RedirectHandler("", 207) // want `"207" can be replaced by http\.StatusMultiStatus`
	_ = http.RedirectHandler("", 208) // want `"208" can be replaced by http\.StatusAlreadyReported`
	_ = http.RedirectHandler("", 226) // want `"226" can be replaced by http\.StatusIMUsed`
	_ = http.RedirectHandler("", 300) // want `"300" can be replaced by http\.StatusMultipleChoices`
	_ = http.RedirectHandler("", 301) // want `"301" can be replaced by http\.StatusMovedPermanently`
	_ = http.RedirectHandler("", 302) // want `"302" can be replaced by http\.StatusFound`
	_ = http.RedirectHandler("", 303) // want `"303" can be replaced by http\.StatusSeeOther`
	_ = http.RedirectHandler("", 304) // want `"304" can be replaced by http\.StatusNotModified`
	_ = http.RedirectHandler("", 305) // want `"305" can be replaced by http\.StatusUseProxy`
	_ = http.RedirectHandler("", 307) // want `"307" can be replaced by http\.StatusTemporaryRedirect`
	_ = http.RedirectHandler("", 308) // want `"308" can be replaced by http\.StatusPermanentRedirect`
	_ = http.RedirectHandler("", 400) // want `"400" can be replaced by http\.StatusBadRequest`
	_ = http.RedirectHandler("", 401) // want `"401" can be replaced by http\.StatusUnauthorized`
	_ = http.RedirectHandler("", 402) // want `"402" can be replaced by http\.StatusPaymentRequired`
	_ = http.RedirectHandler("", 403) // want `"403" can be replaced by http\.StatusForbidden`
	_ = http.RedirectHandler("", 404) // want `"404" can be replaced by http\.StatusNotFound`
	_ = http.RedirectHandler("", 405) // want `"405" can be replaced by http\.StatusMethodNotAllowed`
	_ = http.RedirectHandler("", 406) // want `"406" can be replaced by http\.StatusNotAcceptable`
	_ = http.RedirectHandler("", 407) // want `"407" can be replaced by http\.StatusProxyAuthRequired`
	_ = http.RedirectHandler("", 408) // want `"408" can be replaced by http\.StatusRequestTimeout`
	_ = http.RedirectHandler("", 409) // want `"409" can be replaced by http\.StatusConflict`
	_ = http.RedirectHandler("", 410) // want `"410" can be replaced by http\.StatusGone`
	_ = http.RedirectHandler("", 411) // want `"411" can be replaced by http\.StatusLengthRequired`
	_ = http.RedirectHandler("", 412) // want `"412" can be replaced by http\.StatusPreconditionFailed`
	_ = http.RedirectHandler("", 413) // want `"413" can be replaced by http\.StatusRequestEntityTooLarge`
	_ = http.RedirectHandler("", 414) // want `"414" can be replaced by http\.StatusRequestURITooLong`
	_ = http.RedirectHandler("", 415) // want `"415" can be replaced by http\.StatusUnsupportedMediaType`
	_ = http.RedirectHandler("", 416) // want `"416" can be replaced by http\.StatusRequestedRangeNotSatisfiable`
	_ = http.RedirectHandler("", 417) // want `"417" can be replaced by http\.StatusExpectationFailed`
	_ = http.RedirectHandler("", 418) // want `"418" can be replaced by http\.StatusTeapot`
	_ = http.RedirectHandler("", 421) // want `"421" can be replaced by http\.StatusMisdirectedRequest`
	_ = http.RedirectHandler("", 422) // want `"422" can be replaced by http\.StatusUnprocessableEntity`
	_ = http.RedirectHandler("", 423) // want `"423" can be replaced by http\.StatusLocked`
	_ = http.RedirectHandler("", 424) // want `"424" can be replaced by http\.StatusFailedDependency`
	_ = http.RedirectHandler("", 425) // want `"425" can be replaced by http\.StatusTooEarly`
	_ = http.RedirectHandler("", 426) // want `"426" can be replaced by http\.StatusUpgradeRequired`
	_ = http.RedirectHandler("", 428) // want `"428" can be replaced by http\.StatusPreconditionRequired`
	_ = http.RedirectHandler("", 429) // want `"429" can be replaced by http\.StatusTooManyRequests`
	_ = http.RedirectHandler("", 431) // want `"431" can be replaced by http\.StatusRequestHeaderFieldsTooLarge`
	_ = http.RedirectHandler("", 451) // want `"451" can be replaced by http\.StatusUnavailableForLegalReasons`
	_ = http.RedirectHandler("", 500) // want `"500" can be replaced by http\.StatusInternalServerError`
	_ = http.RedirectHandler("", 501) // want `"501" can be replaced by http\.StatusNotImplemented`
	_ = http.RedirectHandler("", 502) // want `"502" can be replaced by http\.StatusBadGateway`
	_ = http.RedirectHandler("", 503) // want `"503" can be replaced by http\.StatusServiceUnavailable`
	_ = http.RedirectHandler("", 504) // want `"504" can be replaced by http\.StatusGatewayTimeout`
	_ = http.RedirectHandler("", 505) // want `"505" can be replaced by http\.StatusHTTPVersionNotSupported`
	_ = http.RedirectHandler("", 506) // want `"506" can be replaced by http\.StatusVariantAlsoNegotiates`
	_ = http.RedirectHandler("", 507) // want `"507" can be replaced by http\.StatusInsufficientStorage`
	_ = http.RedirectHandler("", 508) // want `"508" can be replaced by http\.StatusLoopDetected`
	_ = http.RedirectHandler("", 510) // want `"510" can be replaced by http\.StatusNotExtended`
	_ = http.RedirectHandler("", 511) // want `"511" can be replaced by http\.StatusNetworkAuthenticationRequired`
)

var (
	_ = http.RedirectHandler("", http.StatusContinue)
	_ = http.RedirectHandler("", http.StatusSwitchingProtocols)
	_ = http.RedirectHandler("", http.StatusProcessing)
	_ = http.RedirectHandler("", http.StatusEarlyHints)
	_ = http.RedirectHandler("", http.StatusOK)
	_ = http.RedirectHandler("", http.StatusCreated)
	_ = http.RedirectHandler("", http.StatusAccepted)
	_ = http.RedirectHandler("", http.StatusNonAuthoritativeInfo)
	_ = http.RedirectHandler("", http.StatusNoContent)
	_ = http.RedirectHandler("", http.StatusResetContent)
	_ = http.RedirectHandler("", http.StatusPartialContent)
	_ = http.RedirectHandler("", http.StatusMultiStatus)
	_ = http.RedirectHandler("", http.StatusAlreadyReported)
	_ = http.RedirectHandler("", http.StatusIMUsed)
	_ = http.RedirectHandler("", http.StatusMultipleChoices)
	_ = http.RedirectHandler("", http.StatusMovedPermanently)
	_ = http.RedirectHandler("", http.StatusFound)
	_ = http.RedirectHandler("", http.StatusSeeOther)
	_ = http.RedirectHandler("", http.StatusNotModified)
	_ = http.RedirectHandler("", http.StatusUseProxy)
	_ = http.RedirectHandler("", http.StatusTemporaryRedirect)
	_ = http.RedirectHandler("", http.StatusPermanentRedirect)
	_ = http.RedirectHandler("", http.StatusBadRequest)
	_ = http.RedirectHandler("", http.StatusUnauthorized)
	_ = http.RedirectHandler("", http.StatusPaymentRequired)
	_ = http.RedirectHandler("", http.StatusForbidden)
	_ = http.RedirectHandler("", http.StatusNotFound)
	_ = http.RedirectHandler("", http.StatusMethodNotAllowed)
	_ = http.RedirectHandler("", http.StatusNotAcceptable)
	_ = http.RedirectHandler("", http.StatusProxyAuthRequired)
	_ = http.RedirectHandler("", http.StatusRequestTimeout)
	_ = http.RedirectHandler("", http.StatusConflict)
	_ = http.RedirectHandler("", http.StatusGone)
	_ = http.RedirectHandler("", http.StatusLengthRequired)
	_ = http.RedirectHandler("", http.StatusPreconditionFailed)
	_ = http.RedirectHandler("", http.StatusRequestEntityTooLarge)
	_ = http.RedirectHandler("", http.StatusRequestURITooLong)
	_ = http.RedirectHandler("", http.StatusUnsupportedMediaType)
	_ = http.RedirectHandler("", http.StatusRequestedRangeNotSatisfiable)
	_ = http.RedirectHandler("", http.StatusExpectationFailed)
	_ = http.RedirectHandler("", http.StatusTeapot)
	_ = http.RedirectHandler("", http.StatusMisdirectedRequest)
	_ = http.RedirectHandler("", http.StatusUnprocessableEntity)
	_ = http.RedirectHandler("", http.StatusLocked)
	_ = http.RedirectHandler("", http.StatusFailedDependency)
	_ = http.RedirectHandler("", http.StatusTooEarly)
	_ = http.RedirectHandler("", http.StatusUpgradeRequired)
	_ = http.RedirectHandler("", http.StatusPreconditionRequired)
	_ = http.RedirectHandler("", http.StatusTooManyRequests)
	_ = http.RedirectHandler("", http.StatusRequestHeaderFieldsTooLarge)
	_ = http.RedirectHandler("", http.StatusUnavailableForLegalReasons)
	_ = http.RedirectHandler("", http.StatusInternalServerError)
	_ = http.RedirectHandler("", http.StatusNotImplemented)
	_ = http.RedirectHandler("", http.StatusBadGateway)
	_ = http.RedirectHandler("", http.StatusServiceUnavailable)
	_ = http.RedirectHandler("", http.StatusGatewayTimeout)
	_ = http.RedirectHandler("", http.StatusHTTPVersionNotSupported)
	_ = http.RedirectHandler("", http.StatusVariantAlsoNegotiates)
	_ = http.RedirectHandler("", http.StatusInsufficientStorage)
	_ = http.RedirectHandler("", http.StatusLoopDetected)
	_ = http.RedirectHandler("", http.StatusNotExtended)
	_ = http.RedirectHandler("", http.StatusNetworkAuthenticationRequired)
)

func _() {
	var resp http.Response
	switch resp.StatusCode {
	case 100: // want `"100" can be replaced by http\.StatusContinue`
		return
	case 101: // want `"101" can be replaced by http\.StatusSwitchingProtocols`
		return
	case 102: // want `"102" can be replaced by http\.StatusProcessing`
		return
	case 103: // want `"103" can be replaced by http\.StatusEarlyHints`
		return
	case 200: // want `"200" can be replaced by http\.StatusOK`
		return
	case 201: // want `"201" can be replaced by http\.StatusCreated`
		return
	case 202: // want `"202" can be replaced by http\.StatusAccepted`
		return
	case 203: // want `"203" can be replaced by http\.StatusNonAuthoritativeInfo`
		return
	case 204: // want `"204" can be replaced by http\.StatusNoContent`
		return
	case 205: // want `"205" can be replaced by http\.StatusResetContent`
		return
	case 206: // want `"206" can be replaced by http\.StatusPartialContent`
		return
	case 207: // want `"207" can be replaced by http\.StatusMultiStatus`
		return
	case 208: // want `"208" can be replaced by http\.StatusAlreadyReported`
		return
	case 226: // want `"226" can be replaced by http\.StatusIMUsed`
		return
	case 300: // want `"300" can be replaced by http\.StatusMultipleChoices`
		return
	case 301: // want `"301" can be replaced by http\.StatusMovedPermanently`
		return
	case 302: // want `"302" can be replaced by http\.StatusFound`
		return
	case 303: // want `"303" can be replaced by http\.StatusSeeOther`
		return
	case 304: // want `"304" can be replaced by http\.StatusNotModified`
		return
	case 305: // want `"305" can be replaced by http\.StatusUseProxy`
		return
	case 307: // want `"307" can be replaced by http\.StatusTemporaryRedirect`
		return
	case 308: // want `"308" can be replaced by http\.StatusPermanentRedirect`
		return
	case 400: // want `"400" can be replaced by http\.StatusBadRequest`
		return
	case 401: // want `"401" can be replaced by http\.StatusUnauthorized`
		return
	case 402: // want `"402" can be replaced by http\.StatusPaymentRequired`
		return
	case 403: // want `"403" can be replaced by http\.StatusForbidden`
		return
	case 404: // want `"404" can be replaced by http\.StatusNotFound`
		return
	case 405: // want `"405" can be replaced by http\.StatusMethodNotAllowed`
		return
	case 406: // want `"406" can be replaced by http\.StatusNotAcceptable`
		return
	case 407: // want `"407" can be replaced by http\.StatusProxyAuthRequired`
		return
	case 408: // want `"408" can be replaced by http\.StatusRequestTimeout`
		return
	case 409: // want `"409" can be replaced by http\.StatusConflict`
		return
	case 410: // want `"410" can be replaced by http\.StatusGone`
		return
	case 411: // want `"411" can be replaced by http\.StatusLengthRequired`
		return
	case 412: // want `"412" can be replaced by http\.StatusPreconditionFailed`
		return
	case 413: // want `"413" can be replaced by http\.StatusRequestEntityTooLarge`
		return
	case 414: // want `"414" can be replaced by http\.StatusRequestURITooLong`
		return
	case 415: // want `"415" can be replaced by http\.StatusUnsupportedMediaType`
		return
	case 416: // want `"416" can be replaced by http\.StatusRequestedRangeNotSatisfiable`
		return
	case 417: // want `"417" can be replaced by http\.StatusExpectationFailed`
		return
	case 418: // want `"418" can be replaced by http\.StatusTeapot`
		return
	case 421: // want `"421" can be replaced by http\.StatusMisdirectedRequest`
		return
	case 422: // want `"422" can be replaced by http\.StatusUnprocessableEntity`
		return
	case 423: // want `"423" can be replaced by http\.StatusLocked`
		return
	case 424: // want `"424" can be replaced by http\.StatusFailedDependency`
		return
	case 425: // want `"425" can be replaced by http\.StatusTooEarly`
		return
	case 426: // want `"426" can be replaced by http\.StatusUpgradeRequired`
		return
	case 428: // want `"428" can be replaced by http\.StatusPreconditionRequired`
		return
	case 429: // want `"429" can be replaced by http\.StatusTooManyRequests`
		return
	case 431: // want `"431" can be replaced by http\.StatusRequestHeaderFieldsTooLarge`
		return
	case 451: // want `"451" can be replaced by http\.StatusUnavailableForLegalReasons`
		return
	case 500: // want `"500" can be replaced by http\.StatusInternalServerError`
		return
	case 501: // want `"501" can be replaced by http\.StatusNotImplemented`
		return
	case 502: // want `"502" can be replaced by http\.StatusBadGateway`
		return
	case 503: // want `"503" can be replaced by http\.StatusServiceUnavailable`
		return
	case 504: // want `"504" can be replaced by http\.StatusGatewayTimeout`
		return
	case 505: // want `"505" can be replaced by http\.StatusHTTPVersionNotSupported`
		return
	case 506: // want `"506" can be replaced by http\.StatusVariantAlsoNegotiates`
		return
	case 507: // want `"507" can be replaced by http\.StatusInsufficientStorage`
		return
	case 508: // want `"508" can be replaced by http\.StatusLoopDetected`
		return
	case 510: // want `"510" can be replaced by http\.StatusNotExtended`
		return
	case 511: // want `"511" can be replaced by http\.StatusNetworkAuthenticationRequired`
		return
	}
}

func _() {
	var resp http.Response
	switch resp.StatusCode {
	case http.StatusContinue:
		return
	case http.StatusSwitchingProtocols:
		return
	case http.StatusProcessing:
		return
	case http.StatusEarlyHints:
		return
	case http.StatusOK:
		return
	case http.StatusCreated:
		return
	case http.StatusAccepted:
		return
	case http.StatusNonAuthoritativeInfo:
		return
	case http.StatusNoContent:
		return
	case http.StatusResetContent:
		return
	case http.StatusPartialContent:
		return
	case http.StatusMultiStatus:
		return
	case http.StatusAlreadyReported:
		return
	case http.StatusIMUsed:
		return
	case http.StatusMultipleChoices:
		return
	case http.StatusMovedPermanently:
		return
	case http.StatusFound:
		return
	case http.StatusSeeOther:
		return
	case http.StatusNotModified:
		return
	case http.StatusUseProxy:
		return
	case http.StatusTemporaryRedirect:
		return
	case http.StatusPermanentRedirect:
		return
	case http.StatusBadRequest:
		return
	case http.StatusUnauthorized:
		return
	case http.StatusPaymentRequired:
		return
	case http.StatusForbidden:
		return
	case http.StatusNotFound:
		return
	case http.StatusMethodNotAllowed:
		return
	case http.StatusNotAcceptable:
		return
	case http.StatusProxyAuthRequired:
		return
	case http.StatusRequestTimeout:
		return
	case http.StatusConflict:
		return
	case http.StatusGone:
		return
	case http.StatusLengthRequired:
		return
	case http.StatusPreconditionFailed:
		return
	case http.StatusRequestEntityTooLarge:
		return
	case http.StatusRequestURITooLong:
		return
	case http.StatusUnsupportedMediaType:
		return
	case http.StatusRequestedRangeNotSatisfiable:
		return
	case http.StatusExpectationFailed:
		return
	case http.StatusTeapot:
		return
	case http.StatusMisdirectedRequest:
		return
	case http.StatusUnprocessableEntity:
		return
	case http.StatusLocked:
		return
	case http.StatusFailedDependency:
		return
	case http.StatusTooEarly:
		return
	case http.StatusUpgradeRequired:
		return
	case http.StatusPreconditionRequired:
		return
	case http.StatusTooManyRequests:
		return
	case http.StatusRequestHeaderFieldsTooLarge:
		return
	case http.StatusUnavailableForLegalReasons:
		return
	case http.StatusInternalServerError:
		return
	case http.StatusNotImplemented:
		return
	case http.StatusBadGateway:
		return
	case http.StatusServiceUnavailable:
		return
	case http.StatusGatewayTimeout:
		return
	case http.StatusHTTPVersionNotSupported:
		return
	case http.StatusVariantAlsoNegotiates:
		return
	case http.StatusInsufficientStorage:
		return
	case http.StatusLoopDetected:
		return
	case http.StatusNotExtended:
		return
	case http.StatusNetworkAuthenticationRequired:
		return
	}
}

func _() {
	var resp http.Response
	switch {
	case resp.StatusCode == 100: // want `"100" can be replaced by http\.StatusContinue`
		return
	case resp.StatusCode == 101: // want `"101" can be replaced by http\.StatusSwitchingProtocols`
		return
	case resp.StatusCode == 102: // want `"102" can be replaced by http\.StatusProcessing`
		return
	case resp.StatusCode == 103: // want `"103" can be replaced by http\.StatusEarlyHints`
		return
	case resp.StatusCode == 200: // want `"200" can be replaced by http\.StatusOK`
		return
	case resp.StatusCode == 201: // want `"201" can be replaced by http\.StatusCreated`
		return
	case resp.StatusCode == 202: // want `"202" can be replaced by http\.StatusAccepted`
		return
	case resp.StatusCode == 203: // want `"203" can be replaced by http\.StatusNonAuthoritativeInfo`
		return
	case resp.StatusCode == 204: // want `"204" can be replaced by http\.StatusNoContent`
		return
	case resp.StatusCode == 205: // want `"205" can be replaced by http\.StatusResetContent`
		return
	case resp.StatusCode == 206: // want `"206" can be replaced by http\.StatusPartialContent`
		return
	case resp.StatusCode == 207: // want `"207" can be replaced by http\.StatusMultiStatus`
		return
	case resp.StatusCode == 208: // want `"208" can be replaced by http\.StatusAlreadyReported`
		return
	case resp.StatusCode == 226: // want `"226" can be replaced by http\.StatusIMUsed`
		return
	case resp.StatusCode == 300: // want `"300" can be replaced by http\.StatusMultipleChoices`
		return
	case resp.StatusCode == 301: // want `"301" can be replaced by http\.StatusMovedPermanently`
		return
	case resp.StatusCode == 302: // want `"302" can be replaced by http\.StatusFound`
		return
	case resp.StatusCode == 303: // want `"303" can be replaced by http\.StatusSeeOther`
		return
	case resp.StatusCode == 304: // want `"304" can be replaced by http\.StatusNotModified`
		return
	case resp.StatusCode == 305: // want `"305" can be replaced by http\.StatusUseProxy`
		return
	case resp.StatusCode == 307: // want `"307" can be replaced by http\.StatusTemporaryRedirect`
		return
	case resp.StatusCode == 308: // want `"308" can be replaced by http\.StatusPermanentRedirect`
		return
	case resp.StatusCode == 400: // want `"400" can be replaced by http\.StatusBadRequest`
		return
	case resp.StatusCode == 401: // want `"401" can be replaced by http\.StatusUnauthorized`
		return
	case resp.StatusCode == 402: // want `"402" can be replaced by http\.StatusPaymentRequired`
		return
	case resp.StatusCode == 403: // want `"403" can be replaced by http\.StatusForbidden`
		return
	case resp.StatusCode == 404: // want `"404" can be replaced by http\.StatusNotFound`
		return
	case resp.StatusCode == 405: // want `"405" can be replaced by http\.StatusMethodNotAllowed`
		return
	case resp.StatusCode == 406: // want `"406" can be replaced by http\.StatusNotAcceptable`
		return
	case resp.StatusCode == 407: // want `"407" can be replaced by http\.StatusProxyAuthRequired`
		return
	case resp.StatusCode == 408: // want `"408" can be replaced by http\.StatusRequestTimeout`
		return
	case resp.StatusCode == 409: // want `"409" can be replaced by http\.StatusConflict`
		return
	case resp.StatusCode == 410: // want `"410" can be replaced by http\.StatusGone`
		return
	case resp.StatusCode == 411: // want `"411" can be replaced by http\.StatusLengthRequired`
		return
	case resp.StatusCode == 412: // want `"412" can be replaced by http\.StatusPreconditionFailed`
		return
	case resp.StatusCode == 413: // want `"413" can be replaced by http\.StatusRequestEntityTooLarge`
		return
	case resp.StatusCode == 414: // want `"414" can be replaced by http\.StatusRequestURITooLong`
		return
	case resp.StatusCode == 415: // want `"415" can be replaced by http\.StatusUnsupportedMediaType`
		return
	case resp.StatusCode == 416: // want `"416" can be replaced by http\.StatusRequestedRangeNotSatisfiable`
		return
	case resp.StatusCode == 417: // want `"417" can be replaced by http\.StatusExpectationFailed`
		return
	case resp.StatusCode == 418: // want `"418" can be replaced by http\.StatusTeapot`
		return
	case resp.StatusCode == 421: // want `"421" can be replaced by http\.StatusMisdirectedRequest`
		return
	case resp.StatusCode == 422: // want `"422" can be replaced by http\.StatusUnprocessableEntity`
		return
	case resp.StatusCode == 423: // want `"423" can be replaced by http\.StatusLocked`
		return
	case resp.StatusCode == 424: // want `"424" can be replaced by http\.StatusFailedDependency`
		return
	case resp.StatusCode == 425: // want `"425" can be replaced by http\.StatusTooEarly`
		return
	case resp.StatusCode == 426: // want `"426" can be replaced by http\.StatusUpgradeRequired`
		return
	case resp.StatusCode == 428: // want `"428" can be replaced by http\.StatusPreconditionRequired`
		return
	case resp.StatusCode == 429: // want `"429" can be replaced by http\.StatusTooManyRequests`
		return
	case resp.StatusCode == 431: // want `"431" can be replaced by http\.StatusRequestHeaderFieldsTooLarge`
		return
	case resp.StatusCode == 451: // want `"451" can be replaced by http\.StatusUnavailableForLegalReasons`
		return
	case resp.StatusCode == 500: // want `"500" can be replaced by http\.StatusInternalServerError`
		return
	case resp.StatusCode == 501: // want `"501" can be replaced by http\.StatusNotImplemented`
		return
	case resp.StatusCode == 502: // want `"502" can be replaced by http\.StatusBadGateway`
		return
	case resp.StatusCode == 503: // want `"503" can be replaced by http\.StatusServiceUnavailable`
		return
	case resp.StatusCode == 504: // want `"504" can be replaced by http\.StatusGatewayTimeout`
		return
	case resp.StatusCode == 505: // want `"505" can be replaced by http\.StatusHTTPVersionNotSupported`
		return
	case resp.StatusCode == 506: // want `"506" can be replaced by http\.StatusVariantAlsoNegotiates`
		return
	case resp.StatusCode == 507: // want `"507" can be replaced by http\.StatusInsufficientStorage`
		return
	case resp.StatusCode == 508: // want `"508" can be replaced by http\.StatusLoopDetected`
		return
	case resp.StatusCode == 510: // want `"510" can be replaced by http\.StatusNotExtended`
		return
	case resp.StatusCode == 511: // want `"511" can be replaced by http\.StatusNetworkAuthenticationRequired`
		return
	}
}

func _() {
	var resp http.Response
	switch {
	case resp.StatusCode == http.StatusContinue:
		return
	case resp.StatusCode == http.StatusSwitchingProtocols:
		return
	case resp.StatusCode == http.StatusProcessing:
		return
	case resp.StatusCode == http.StatusEarlyHints:
		return
	case resp.StatusCode == http.StatusOK:
		return
	case resp.StatusCode == http.StatusCreated:
		return
	case resp.StatusCode == http.StatusAccepted:
		return
	case resp.StatusCode == http.StatusNonAuthoritativeInfo:
		return
	case resp.StatusCode == http.StatusNoContent:
		return
	case resp.StatusCode == http.StatusResetContent:
		return
	case resp.StatusCode == http.StatusPartialContent:
		return
	case resp.StatusCode == http.StatusMultiStatus:
		return
	case resp.StatusCode == http.StatusAlreadyReported:
		return
	case resp.StatusCode == http.StatusIMUsed:
		return
	case resp.StatusCode == http.StatusMultipleChoices:
		return
	case resp.StatusCode == http.StatusMovedPermanently:
		return
	case resp.StatusCode == http.StatusFound:
		return
	case resp.StatusCode == http.StatusSeeOther:
		return
	case resp.StatusCode == http.StatusNotModified:
		return
	case resp.StatusCode == http.StatusUseProxy:
		return
	case resp.StatusCode == http.StatusTemporaryRedirect:
		return
	case resp.StatusCode == http.StatusPermanentRedirect:
		return
	case resp.StatusCode == http.StatusBadRequest:
		return
	case resp.StatusCode == http.StatusUnauthorized:
		return
	case resp.StatusCode == http.StatusPaymentRequired:
		return
	case resp.StatusCode == http.StatusForbidden:
		return
	case resp.StatusCode == http.StatusNotFound:
		return
	case resp.StatusCode == http.StatusMethodNotAllowed:
		return
	case resp.StatusCode == http.StatusNotAcceptable:
		return
	case resp.StatusCode == http.StatusProxyAuthRequired:
		return
	case resp.StatusCode == http.StatusRequestTimeout:
		return
	case resp.StatusCode == http.StatusConflict:
		return
	case resp.StatusCode == http.StatusGone:
		return
	case resp.StatusCode == http.StatusLengthRequired:
		return
	case resp.StatusCode == http.StatusPreconditionFailed:
		return
	case resp.StatusCode == http.StatusRequestEntityTooLarge:
		return
	case resp.StatusCode == http.StatusRequestURITooLong:
		return
	case resp.StatusCode == http.StatusUnsupportedMediaType:
		return
	case resp.StatusCode == http.StatusRequestedRangeNotSatisfiable:
		return
	case resp.StatusCode == http.StatusExpectationFailed:
		return
	case resp.StatusCode == http.StatusTeapot:
		return
	case resp.StatusCode == http.StatusMisdirectedRequest:
		return
	case resp.StatusCode == http.StatusUnprocessableEntity:
		return
	case resp.StatusCode == http.StatusLocked:
		return
	case resp.StatusCode == http.StatusFailedDependency:
		return
	case resp.StatusCode == http.StatusTooEarly:
		return
	case resp.StatusCode == http.StatusUpgradeRequired:
		return
	case resp.StatusCode == http.StatusPreconditionRequired:
		return
	case resp.StatusCode == http.StatusTooManyRequests:
		return
	case resp.StatusCode == http.StatusRequestHeaderFieldsTooLarge:
		return
	case resp.StatusCode == http.StatusUnavailableForLegalReasons:
		return
	case resp.StatusCode == http.StatusInternalServerError:
		return
	case resp.StatusCode == http.StatusNotImplemented:
		return
	case resp.StatusCode == http.StatusBadGateway:
		return
	case resp.StatusCode == http.StatusServiceUnavailable:
		return
	case resp.StatusCode == http.StatusGatewayTimeout:
		return
	case resp.StatusCode == http.StatusHTTPVersionNotSupported:
		return
	case resp.StatusCode == http.StatusVariantAlsoNegotiates:
		return
	case resp.StatusCode == http.StatusInsufficientStorage:
		return
	case resp.StatusCode == http.StatusLoopDetected:
		return
	case resp.StatusCode == http.StatusNotExtended:
		return
	case resp.StatusCode == http.StatusNetworkAuthenticationRequired:
		return
	}
}

var (
	_ = httptest.ResponseRecorder{Code: 100} // want `"100" can be replaced by http\.StatusContinue`
	_ = httptest.ResponseRecorder{Code: 101} // want `"101" can be replaced by http\.StatusSwitchingProtocols`
	_ = httptest.ResponseRecorder{Code: 102} // want `"102" can be replaced by http\.StatusProcessing`
	_ = httptest.ResponseRecorder{Code: 103} // want `"103" can be replaced by http\.StatusEarlyHints`
	_ = httptest.ResponseRecorder{Code: 200} // want `"200" can be replaced by http\.StatusOK`
	_ = httptest.ResponseRecorder{Code: 201} // want `"201" can be replaced by http\.StatusCreated`
	_ = httptest.ResponseRecorder{Code: 202} // want `"202" can be replaced by http\.StatusAccepted`
	_ = httptest.ResponseRecorder{Code: 203} // want `"203" can be replaced by http\.StatusNonAuthoritativeInfo`
	_ = httptest.ResponseRecorder{Code: 204} // want `"204" can be replaced by http\.StatusNoContent`
	_ = httptest.ResponseRecorder{Code: 205} // want `"205" can be replaced by http\.StatusResetContent`
	_ = httptest.ResponseRecorder{Code: 206} // want `"206" can be replaced by http\.StatusPartialContent`
	_ = httptest.ResponseRecorder{Code: 207} // want `"207" can be replaced by http\.StatusMultiStatus`
	_ = httptest.ResponseRecorder{Code: 208} // want `"208" can be replaced by http\.StatusAlreadyReported`
	_ = httptest.ResponseRecorder{Code: 226} // want `"226" can be replaced by http\.StatusIMUsed`
	_ = httptest.ResponseRecorder{Code: 300} // want `"300" can be replaced by http\.StatusMultipleChoices`
	_ = httptest.ResponseRecorder{Code: 301} // want `"301" can be replaced by http\.StatusMovedPermanently`
	_ = httptest.ResponseRecorder{Code: 302} // want `"302" can be replaced by http\.StatusFound`
	_ = httptest.ResponseRecorder{Code: 303} // want `"303" can be replaced by http\.StatusSeeOther`
	_ = httptest.ResponseRecorder{Code: 304} // want `"304" can be replaced by http\.StatusNotModified`
	_ = httptest.ResponseRecorder{Code: 305} // want `"305" can be replaced by http\.StatusUseProxy`
	_ = httptest.ResponseRecorder{Code: 307} // want `"307" can be replaced by http\.StatusTemporaryRedirect`
	_ = httptest.ResponseRecorder{Code: 308} // want `"308" can be replaced by http\.StatusPermanentRedirect`
	_ = httptest.ResponseRecorder{Code: 400} // want `"400" can be replaced by http\.StatusBadRequest`
	_ = httptest.ResponseRecorder{Code: 401} // want `"401" can be replaced by http\.StatusUnauthorized`
	_ = httptest.ResponseRecorder{Code: 402} // want `"402" can be replaced by http\.StatusPaymentRequired`
	_ = httptest.ResponseRecorder{Code: 403} // want `"403" can be replaced by http\.StatusForbidden`
	_ = httptest.ResponseRecorder{Code: 404} // want `"404" can be replaced by http\.StatusNotFound`
	_ = httptest.ResponseRecorder{Code: 405} // want `"405" can be replaced by http\.StatusMethodNotAllowed`
	_ = httptest.ResponseRecorder{Code: 406} // want `"406" can be replaced by http\.StatusNotAcceptable`
	_ = httptest.ResponseRecorder{Code: 407} // want `"407" can be replaced by http\.StatusProxyAuthRequired`
	_ = httptest.ResponseRecorder{Code: 408} // want `"408" can be replaced by http\.StatusRequestTimeout`
	_ = httptest.ResponseRecorder{Code: 409} // want `"409" can be replaced by http\.StatusConflict`
	_ = httptest.ResponseRecorder{Code: 410} // want `"410" can be replaced by http\.StatusGone`
	_ = httptest.ResponseRecorder{Code: 411} // want `"411" can be replaced by http\.StatusLengthRequired`
	_ = httptest.ResponseRecorder{Code: 412} // want `"412" can be replaced by http\.StatusPreconditionFailed`
	_ = httptest.ResponseRecorder{Code: 413} // want `"413" can be replaced by http\.StatusRequestEntityTooLarge`
	_ = httptest.ResponseRecorder{Code: 414} // want `"414" can be replaced by http\.StatusRequestURITooLong`
	_ = httptest.ResponseRecorder{Code: 415} // want `"415" can be replaced by http\.StatusUnsupportedMediaType`
	_ = httptest.ResponseRecorder{Code: 416} // want `"416" can be replaced by http\.StatusRequestedRangeNotSatisfiable`
	_ = httptest.ResponseRecorder{Code: 417} // want `"417" can be replaced by http\.StatusExpectationFailed`
	_ = httptest.ResponseRecorder{Code: 418} // want `"418" can be replaced by http\.StatusTeapot`
	_ = httptest.ResponseRecorder{Code: 421} // want `"421" can be replaced by http\.StatusMisdirectedRequest`
	_ = httptest.ResponseRecorder{Code: 422} // want `"422" can be replaced by http\.StatusUnprocessableEntity`
	_ = httptest.ResponseRecorder{Code: 423} // want `"423" can be replaced by http\.StatusLocked`
	_ = httptest.ResponseRecorder{Code: 424} // want `"424" can be replaced by http\.StatusFailedDependency`
	_ = httptest.ResponseRecorder{Code: 425} // want `"425" can be replaced by http\.StatusTooEarly`
	_ = httptest.ResponseRecorder{Code: 426} // want `"426" can be replaced by http\.StatusUpgradeRequired`
	_ = httptest.ResponseRecorder{Code: 428} // want `"428" can be replaced by http\.StatusPreconditionRequired`
	_ = httptest.ResponseRecorder{Code: 429} // want `"429" can be replaced by http\.StatusTooManyRequests`
	_ = httptest.ResponseRecorder{Code: 431} // want `"431" can be replaced by http\.StatusRequestHeaderFieldsTooLarge`
	_ = httptest.ResponseRecorder{Code: 451} // want `"451" can be replaced by http\.StatusUnavailableForLegalReasons`
	_ = httptest.ResponseRecorder{Code: 500} // want `"500" can be replaced by http\.StatusInternalServerError`
	_ = httptest.ResponseRecorder{Code: 501} // want `"501" can be replaced by http\.StatusNotImplemented`
	_ = httptest.ResponseRecorder{Code: 502} // want `"502" can be replaced by http\.StatusBadGateway`
	_ = httptest.ResponseRecorder{Code: 503} // want `"503" can be replaced by http\.StatusServiceUnavailable`
	_ = httptest.ResponseRecorder{Code: 504} // want `"504" can be replaced by http\.StatusGatewayTimeout`
	_ = httptest.ResponseRecorder{Code: 505} // want `"505" can be replaced by http\.StatusHTTPVersionNotSupported`
	_ = httptest.ResponseRecorder{Code: 506} // want `"506" can be replaced by http\.StatusVariantAlsoNegotiates`
	_ = httptest.ResponseRecorder{Code: 507} // want `"507" can be replaced by http\.StatusInsufficientStorage`
	_ = httptest.ResponseRecorder{Code: 508} // want `"508" can be replaced by http\.StatusLoopDetected`
	_ = httptest.ResponseRecorder{Code: 510} // want `"510" can be replaced by http\.StatusNotExtended`
	_ = httptest.ResponseRecorder{Code: 511} // want `"511" can be replaced by http\.StatusNetworkAuthenticationRequired`
)

var (
	_ = httptest.ResponseRecorder{Code: http.StatusContinue}
	_ = httptest.ResponseRecorder{Code: http.StatusSwitchingProtocols}
	_ = httptest.ResponseRecorder{Code: http.StatusProcessing}
	_ = httptest.ResponseRecorder{Code: http.StatusEarlyHints}
	_ = httptest.ResponseRecorder{Code: http.StatusOK}
	_ = httptest.ResponseRecorder{Code: http.StatusCreated}
	_ = httptest.ResponseRecorder{Code: http.StatusAccepted}
	_ = httptest.ResponseRecorder{Code: http.StatusNonAuthoritativeInfo}
	_ = httptest.ResponseRecorder{Code: http.StatusNoContent}
	_ = httptest.ResponseRecorder{Code: http.StatusResetContent}
	_ = httptest.ResponseRecorder{Code: http.StatusPartialContent}
	_ = httptest.ResponseRecorder{Code: http.StatusMultiStatus}
	_ = httptest.ResponseRecorder{Code: http.StatusAlreadyReported}
	_ = httptest.ResponseRecorder{Code: http.StatusIMUsed}
	_ = httptest.ResponseRecorder{Code: http.StatusMultipleChoices}
	_ = httptest.ResponseRecorder{Code: http.StatusMovedPermanently}
	_ = httptest.ResponseRecorder{Code: http.StatusFound}
	_ = httptest.ResponseRecorder{Code: http.StatusSeeOther}
	_ = httptest.ResponseRecorder{Code: http.StatusNotModified}
	_ = httptest.ResponseRecorder{Code: http.StatusUseProxy}
	_ = httptest.ResponseRecorder{Code: http.StatusTemporaryRedirect}
	_ = httptest.ResponseRecorder{Code: http.StatusPermanentRedirect}
	_ = httptest.ResponseRecorder{Code: http.StatusBadRequest}
	_ = httptest.ResponseRecorder{Code: http.StatusUnauthorized}
	_ = httptest.ResponseRecorder{Code: http.StatusPaymentRequired}
	_ = httptest.ResponseRecorder{Code: http.StatusForbidden}
	_ = httptest.ResponseRecorder{Code: http.StatusNotFound}
	_ = httptest.ResponseRecorder{Code: http.StatusMethodNotAllowed}
	_ = httptest.ResponseRecorder{Code: http.StatusNotAcceptable}
	_ = httptest.ResponseRecorder{Code: http.StatusProxyAuthRequired}
	_ = httptest.ResponseRecorder{Code: http.StatusRequestTimeout}
	_ = httptest.ResponseRecorder{Code: http.StatusConflict}
	_ = httptest.ResponseRecorder{Code: http.StatusGone}
	_ = httptest.ResponseRecorder{Code: http.StatusLengthRequired}
	_ = httptest.ResponseRecorder{Code: http.StatusPreconditionFailed}
	_ = httptest.ResponseRecorder{Code: http.StatusRequestEntityTooLarge}
	_ = httptest.ResponseRecorder{Code: http.StatusRequestURITooLong}
	_ = httptest.ResponseRecorder{Code: http.StatusUnsupportedMediaType}
	_ = httptest.ResponseRecorder{Code: http.StatusRequestedRangeNotSatisfiable}
	_ = httptest.ResponseRecorder{Code: http.StatusExpectationFailed}
	_ = httptest.ResponseRecorder{Code: http.StatusTeapot}
	_ = httptest.ResponseRecorder{Code: http.StatusMisdirectedRequest}
	_ = httptest.ResponseRecorder{Code: http.StatusUnprocessableEntity}
	_ = httptest.ResponseRecorder{Code: http.StatusLocked}
	_ = httptest.ResponseRecorder{Code: http.StatusFailedDependency}
	_ = httptest.ResponseRecorder{Code: http.StatusTooEarly}
	_ = httptest.ResponseRecorder{Code: http.StatusUpgradeRequired}
	_ = httptest.ResponseRecorder{Code: http.StatusPreconditionRequired}
	_ = httptest.ResponseRecorder{Code: http.StatusTooManyRequests}
	_ = httptest.ResponseRecorder{Code: http.StatusRequestHeaderFieldsTooLarge}
	_ = httptest.ResponseRecorder{Code: http.StatusUnavailableForLegalReasons}
	_ = httptest.ResponseRecorder{Code: http.StatusInternalServerError}
	_ = httptest.ResponseRecorder{Code: http.StatusNotImplemented}
	_ = httptest.ResponseRecorder{Code: http.StatusBadGateway}
	_ = httptest.ResponseRecorder{Code: http.StatusServiceUnavailable}
	_ = httptest.ResponseRecorder{Code: http.StatusGatewayTimeout}
	_ = httptest.ResponseRecorder{Code: http.StatusHTTPVersionNotSupported}
	_ = httptest.ResponseRecorder{Code: http.StatusVariantAlsoNegotiates}
	_ = httptest.ResponseRecorder{Code: http.StatusInsufficientStorage}
	_ = httptest.ResponseRecorder{Code: http.StatusLoopDetected}
	_ = httptest.ResponseRecorder{Code: http.StatusNotExtended}
	_ = httptest.ResponseRecorder{Code: http.StatusNetworkAuthenticationRequired}
)
