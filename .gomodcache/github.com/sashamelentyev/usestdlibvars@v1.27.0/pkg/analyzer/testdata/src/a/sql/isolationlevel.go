// Code generated by usestdlibvars, DO NOT EDIT.

package sql_test

var (
	_ = "Read Committed"   // want `"Read Committed" can be replaced by sql\.LevelReadCommitted\.String\(\)`
	_ = "Read Uncommitted" // want `"Read Uncommitted" can be replaced by sql\.LevelReadUncommitted\.String\(\)`
	_ = "Repeatable Read"  // want `"Repeatable Read" can be replaced by sql\.LevelRepeatableRead\.String\(\)`
	_ = "Write Committed"  // want `"Write Committed" can be replaced by sql\.LevelWriteCommitted\.String\(\)`
)

const (
	_ = "Read Committed"   // want `"Read Committed" can be replaced by sql\.LevelReadCommitted\.String\(\)`
	_ = "Read Uncommitted" // want `"Read Uncommitted" can be replaced by sql\.LevelReadUncommitted\.String\(\)`
	_ = "Repeatable Read"  // want `"Repeatable Read" can be replaced by sql\.LevelRepeatableRead\.String\(\)`
	_ = "Write Committed"  // want `"Write Committed" can be replaced by sql\.LevelWriteCommitted\.String\(\)`
)

var (
	_ = func(s string) string { return s }("Read Committed")   // want `"Read Committed" can be replaced by sql\.LevelReadCommitted\.String\(\)`
	_ = func(s string) string { return s }("Read Uncommitted") // want `"Read Uncommitted" can be replaced by sql\.LevelReadUncommitted\.String\(\)`
	_ = func(s string) string { return s }("Repeatable Read")  // want `"Repeatable Read" can be replaced by sql\.LevelRepeatableRead\.String\(\)`
	_ = func(s string) string { return s }("Write Committed")  // want `"Write Committed" can be replaced by sql\.LevelWriteCommitted\.String\(\)`
)
