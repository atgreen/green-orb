// Code generated by usestdlibvars, DO NOT EDIT.

package {{ .PackageName }}

import (
    "net/http"
    "net/http/httptest"
)

var (
{{- range $key, $value := .Mapping }}
	_ = {{ $key }}
{{- end }}
)

const (
{{- range $key, $value := .Mapping }}
	_ = {{ $key }}
{{- end }}
)

func _() {
	var w http.ResponseWriter
{{- range $key, $value := .Mapping }}
	w.WriteHeader({{ $key }}) // want `"{{ quoteMeta $key }}" can be replaced by {{ quoteMeta $value }}`
{{- end }}
}

func _() {
	var w http.ResponseWriter
{{- range $key, $value := .Mapping }}
	w.WriteHeader({{ $value }})
{{- end }}
}

var (
{{- range $key, $value := .Mapping }}
	_ = http.Response{StatusCode: {{ $key }}} // want `"{{ quoteMeta $key }}" can be replaced by {{ quoteMeta $value }}`
{{- end }}
)

var (
{{- range $key, $value := .Mapping }}
	_ = http.Response{StatusCode: {{ $value }}}
{{- end }}
)

var (
{{- range $key, $value := .Mapping }}
	_ = &http.Response{StatusCode: {{ $key }}} // want `"{{ quoteMeta $key }}" can be replaced by {{ quoteMeta $value }}`
{{- end }}
)

var (
{{- range $key, $value := .Mapping }}
	_ = &http.Response{StatusCode: {{ $value }}}
{{- end }}
)

func _() error {
    resp, err := http.DefaultClient.Do(&http.Request{})
    if err != nil {
        return err
    }
    defer func() { _ = resp.Body.Close() }()
{{- range $key, $value := .Mapping }}
    if resp.StatusCode == {{ $key }} { // want `"{{ quoteMeta $key }}" can be replaced by {{ quoteMeta $value }}`
        return nil
    } else if resp.StatusCode == {{ $key }} { // want `"{{ quoteMeta $key }}" can be replaced by {{ quoteMeta $value }}`
        return nil
    } else if false || resp.StatusCode == {{ $key }} { // want `"{{ quoteMeta $key }}" can be replaced by {{ quoteMeta $value }}`
        return nil
    }
{{- end }}
{{- range $key, $value := .Mapping }}
    for resp.StatusCode == {{ $key }} { // want `"{{ quoteMeta $key }}" can be replaced by {{ quoteMeta $value }}`
        return nil
    }
{{- end }}
    return nil
}

func _() error {
    resp, err := http.DefaultClient.Do(&http.Request{})
    if err != nil {
        return err
    }
    defer func() { _ = resp.Body.Close() }()
{{- range $key, $value := .Mapping }}
    if resp.StatusCode == {{ $value }} {
        return nil
    } else if resp.StatusCode == {{ $value }} {
        return nil
    } else if false || resp.StatusCode == {{ $value }} {
        return nil
    }
{{- end }}
{{- range $key, $value := .Mapping }}
    for resp.StatusCode == {{ $value }} {
        return nil
    }
{{- end }}
    return nil
}

func _() {
    var w http.ResponseWriter
{{- range $key, $value := .Mapping }}
    http.Error(w, "", {{ $key }}) // want `"{{ quoteMeta $key }}" can be replaced by {{ quoteMeta $value }}`
{{- end }}
}

func _() {
    var w http.ResponseWriter
{{- range $key, $value := .Mapping }}
    http.Error(w, "", {{ $value }})
{{- end }}
}

var (
{{- range $key, $value := .Mapping }}
    _ = http.StatusText({{ $key }}) // want `"{{ quoteMeta $key }}" can be replaced by {{ quoteMeta $value }}`
{{- end }}
)

var (
{{- range $key, $value := .Mapping }}
    _ = http.StatusText({{ $value }})
{{- end }}
)

func _() {
    var w http.ResponseWriter
    var r *http.Request
{{- range $key, $value := .Mapping }}
    http.Redirect(w, r, "", {{ $key }}) // want `"{{ quoteMeta $key }}" can be replaced by {{ quoteMeta $value }}`
{{- end }}
}

func _() {
    var w http.ResponseWriter
    var r *http.Request
{{- range $key, $value := .Mapping }}
    http.Redirect(w, r, "", {{ $value }})
{{- end }}
}

var (
{{- range $key, $value := .Mapping }}
    _ = http.RedirectHandler("", {{ $key }}) // want `"{{ quoteMeta $key }}" can be replaced by {{ quoteMeta $value }}`
{{- end }}
)

var (
{{- range $key, $value := .Mapping }}
    _ = http.RedirectHandler("", {{ $value }})
{{- end }}
)

func _() {
    var resp http.Response
    switch resp.StatusCode {
{{- range $key, $value := .Mapping }}
    case {{ $key }}: // want `"{{ quoteMeta $key }}" can be replaced by {{ quoteMeta $value }}`
      return
{{- end }}
    }
}

func _() {
    var resp http.Response
    switch resp.StatusCode {
{{- range $key, $value := .Mapping }}
    case {{ $value }}:
      return
{{- end }}
    }
}

func _() {
    var resp http.Response
    switch {
{{- range $key, $value := .Mapping }}
    case resp.StatusCode == {{ $key }}: // want `"{{ quoteMeta $key }}" can be replaced by {{ quoteMeta $value }}`
      return
{{- end }}
    }
}

func _() {
    var resp http.Response
    switch {
{{- range $key, $value := .Mapping }}
    case resp.StatusCode == {{ $value }}:
      return
{{- end }}
    }
}

var (
{{- range $key, $value := .Mapping }}
	_ = httptest.ResponseRecorder{Code: {{ $key }}} // want `"{{ quoteMeta $key }}" can be replaced by {{ quoteMeta $value }}`
{{- end }}
)

var (
{{- range $key, $value := .Mapping }}
	_ = httptest.ResponseRecorder{Code: {{ $value }}}
{{- end }}
)
