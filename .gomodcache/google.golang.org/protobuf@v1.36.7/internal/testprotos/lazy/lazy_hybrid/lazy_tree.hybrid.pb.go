// Copyright 2024 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: internal/testprotos/lazy/lazy_hybrid/lazy_tree.hybrid.proto

//go:build !protoopaque

package lazy_hybrid

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

type Node struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Nested        *Node                  `protobuf:"bytes,99,opt,name=nested" json:"nested,omitempty"`
	Int32         *int32                 `protobuf:"varint,1,opt,name=int32" json:"int32,omitempty"`
	Int64         *int64                 `protobuf:"varint,2,opt,name=int64" json:"int64,omitempty"`
	Uint32        *uint32                `protobuf:"varint,3,opt,name=uint32" json:"uint32,omitempty"`
	Uint64        *uint64                `protobuf:"varint,4,opt,name=uint64" json:"uint64,omitempty"`
	Sint32        *int32                 `protobuf:"zigzag32,5,opt,name=sint32" json:"sint32,omitempty"`
	Sint64        *int64                 `protobuf:"zigzag64,6,opt,name=sint64" json:"sint64,omitempty"`
	Fixed32       *uint32                `protobuf:"fixed32,7,opt,name=fixed32" json:"fixed32,omitempty"`
	Fixed64       *uint64                `protobuf:"fixed64,8,opt,name=fixed64" json:"fixed64,omitempty"`
	Sfixed32      *int32                 `protobuf:"fixed32,9,opt,name=sfixed32" json:"sfixed32,omitempty"`
	Sfixed64      *int64                 `protobuf:"fixed64,10,opt,name=sfixed64" json:"sfixed64,omitempty"`
	Float         *float32               `protobuf:"fixed32,11,opt,name=float" json:"float,omitempty"`
	Double        *float64               `protobuf:"fixed64,12,opt,name=double" json:"double,omitempty"`
	Bool          *bool                  `protobuf:"varint,13,opt,name=bool" json:"bool,omitempty"`
	String_       *string                `protobuf:"bytes,14,opt,name=string" json:"string,omitempty"`
	Bytes         []byte                 `protobuf:"bytes,15,opt,name=bytes" json:"bytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Node) Reset() {
	*x = Node{}
	mi := &file_internal_testprotos_lazy_lazy_hybrid_lazy_tree_hybrid_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_internal_testprotos_lazy_lazy_hybrid_lazy_tree_hybrid_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Node) GetNested() *Node {
	if x != nil {
		return x.Nested
	}
	return nil
}

func (x *Node) GetInt32() int32 {
	if x != nil && x.Int32 != nil {
		return *x.Int32
	}
	return 0
}

func (x *Node) GetInt64() int64 {
	if x != nil && x.Int64 != nil {
		return *x.Int64
	}
	return 0
}

func (x *Node) GetUint32() uint32 {
	if x != nil && x.Uint32 != nil {
		return *x.Uint32
	}
	return 0
}

func (x *Node) GetUint64() uint64 {
	if x != nil && x.Uint64 != nil {
		return *x.Uint64
	}
	return 0
}

func (x *Node) GetSint32() int32 {
	if x != nil && x.Sint32 != nil {
		return *x.Sint32
	}
	return 0
}

func (x *Node) GetSint64() int64 {
	if x != nil && x.Sint64 != nil {
		return *x.Sint64
	}
	return 0
}

func (x *Node) GetFixed32() uint32 {
	if x != nil && x.Fixed32 != nil {
		return *x.Fixed32
	}
	return 0
}

func (x *Node) GetFixed64() uint64 {
	if x != nil && x.Fixed64 != nil {
		return *x.Fixed64
	}
	return 0
}

func (x *Node) GetSfixed32() int32 {
	if x != nil && x.Sfixed32 != nil {
		return *x.Sfixed32
	}
	return 0
}

func (x *Node) GetSfixed64() int64 {
	if x != nil && x.Sfixed64 != nil {
		return *x.Sfixed64
	}
	return 0
}

func (x *Node) GetFloat() float32 {
	if x != nil && x.Float != nil {
		return *x.Float
	}
	return 0
}

func (x *Node) GetDouble() float64 {
	if x != nil && x.Double != nil {
		return *x.Double
	}
	return 0
}

func (x *Node) GetBool() bool {
	if x != nil && x.Bool != nil {
		return *x.Bool
	}
	return false
}

func (x *Node) GetString() string {
	if x != nil && x.String_ != nil {
		return *x.String_
	}
	return ""
}

// Deprecated: Use GetString instead.
func (x *Node) GetString_() string {
	return x.GetString()
}

func (x *Node) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *Node) SetNested(v *Node) {
	x.Nested = v
}

func (x *Node) SetInt32(v int32) {
	x.Int32 = &v
}

func (x *Node) SetInt64(v int64) {
	x.Int64 = &v
}

func (x *Node) SetUint32(v uint32) {
	x.Uint32 = &v
}

func (x *Node) SetUint64(v uint64) {
	x.Uint64 = &v
}

func (x *Node) SetSint32(v int32) {
	x.Sint32 = &v
}

func (x *Node) SetSint64(v int64) {
	x.Sint64 = &v
}

func (x *Node) SetFixed32(v uint32) {
	x.Fixed32 = &v
}

func (x *Node) SetFixed64(v uint64) {
	x.Fixed64 = &v
}

func (x *Node) SetSfixed32(v int32) {
	x.Sfixed32 = &v
}

func (x *Node) SetSfixed64(v int64) {
	x.Sfixed64 = &v
}

func (x *Node) SetFloat(v float32) {
	x.Float = &v
}

func (x *Node) SetDouble(v float64) {
	x.Double = &v
}

func (x *Node) SetBool(v bool) {
	x.Bool = &v
}

func (x *Node) SetString(v string) {
	x.String_ = &v
}

func (x *Node) SetBytes(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.Bytes = v
}

func (x *Node) HasNested() bool {
	if x == nil {
		return false
	}
	return x.Nested != nil
}

func (x *Node) HasInt32() bool {
	if x == nil {
		return false
	}
	return x.Int32 != nil
}

func (x *Node) HasInt64() bool {
	if x == nil {
		return false
	}
	return x.Int64 != nil
}

func (x *Node) HasUint32() bool {
	if x == nil {
		return false
	}
	return x.Uint32 != nil
}

func (x *Node) HasUint64() bool {
	if x == nil {
		return false
	}
	return x.Uint64 != nil
}

func (x *Node) HasSint32() bool {
	if x == nil {
		return false
	}
	return x.Sint32 != nil
}

func (x *Node) HasSint64() bool {
	if x == nil {
		return false
	}
	return x.Sint64 != nil
}

func (x *Node) HasFixed32() bool {
	if x == nil {
		return false
	}
	return x.Fixed32 != nil
}

func (x *Node) HasFixed64() bool {
	if x == nil {
		return false
	}
	return x.Fixed64 != nil
}

func (x *Node) HasSfixed32() bool {
	if x == nil {
		return false
	}
	return x.Sfixed32 != nil
}

func (x *Node) HasSfixed64() bool {
	if x == nil {
		return false
	}
	return x.Sfixed64 != nil
}

func (x *Node) HasFloat() bool {
	if x == nil {
		return false
	}
	return x.Float != nil
}

func (x *Node) HasDouble() bool {
	if x == nil {
		return false
	}
	return x.Double != nil
}

func (x *Node) HasBool() bool {
	if x == nil {
		return false
	}
	return x.Bool != nil
}

func (x *Node) HasString() bool {
	if x == nil {
		return false
	}
	return x.String_ != nil
}

func (x *Node) HasBytes() bool {
	if x == nil {
		return false
	}
	return x.Bytes != nil
}

func (x *Node) ClearNested() {
	x.Nested = nil
}

func (x *Node) ClearInt32() {
	x.Int32 = nil
}

func (x *Node) ClearInt64() {
	x.Int64 = nil
}

func (x *Node) ClearUint32() {
	x.Uint32 = nil
}

func (x *Node) ClearUint64() {
	x.Uint64 = nil
}

func (x *Node) ClearSint32() {
	x.Sint32 = nil
}

func (x *Node) ClearSint64() {
	x.Sint64 = nil
}

func (x *Node) ClearFixed32() {
	x.Fixed32 = nil
}

func (x *Node) ClearFixed64() {
	x.Fixed64 = nil
}

func (x *Node) ClearSfixed32() {
	x.Sfixed32 = nil
}

func (x *Node) ClearSfixed64() {
	x.Sfixed64 = nil
}

func (x *Node) ClearFloat() {
	x.Float = nil
}

func (x *Node) ClearDouble() {
	x.Double = nil
}

func (x *Node) ClearBool() {
	x.Bool = nil
}

func (x *Node) ClearString() {
	x.String_ = nil
}

func (x *Node) ClearBytes() {
	x.Bytes = nil
}

type Node_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Nested   *Node
	Int32    *int32
	Int64    *int64
	Uint32   *uint32
	Uint64   *uint64
	Sint32   *int32
	Sint64   *int64
	Fixed32  *uint32
	Fixed64  *uint64
	Sfixed32 *int32
	Sfixed64 *int64
	Float    *float32
	Double   *float64
	Bool     *bool
	String   *string
	Bytes    []byte
}

func (b0 Node_builder) Build() *Node {
	m0 := &Node{}
	b, x := &b0, m0
	_, _ = b, x
	x.Nested = b.Nested
	x.Int32 = b.Int32
	x.Int64 = b.Int64
	x.Uint32 = b.Uint32
	x.Uint64 = b.Uint64
	x.Sint32 = b.Sint32
	x.Sint64 = b.Sint64
	x.Fixed32 = b.Fixed32
	x.Fixed64 = b.Fixed64
	x.Sfixed32 = b.Sfixed32
	x.Sfixed64 = b.Sfixed64
	x.Float = b.Float
	x.Double = b.Double
	x.Bool = b.Bool
	x.String_ = b.String
	x.Bytes = b.Bytes
	return m0
}

var File_internal_testprotos_lazy_lazy_hybrid_lazy_tree_hybrid_proto protoreflect.FileDescriptor

const file_internal_testprotos_lazy_lazy_hybrid_lazy_tree_hybrid_proto_rawDesc = "" +
	"\n" +
	";internal/testprotos/lazy/lazy_hybrid/lazy_tree.hybrid.proto\x12\x10hybrid.lazy_tree\x1a!google/protobuf/go_features.proto\"\xa2\x03\n" +
	"\x04Node\x122\n" +
	"\x06nested\x18c \x01(\v2\x16.hybrid.lazy_tree.NodeB\x02(\x01R\x06nested\x12\x14\n" +
	"\x05int32\x18\x01 \x01(\x05R\x05int32\x12\x14\n" +
	"\x05int64\x18\x02 \x01(\x03R\x05int64\x12\x16\n" +
	"\x06uint32\x18\x03 \x01(\rR\x06uint32\x12\x16\n" +
	"\x06uint64\x18\x04 \x01(\x04R\x06uint64\x12\x16\n" +
	"\x06sint32\x18\x05 \x01(\x11R\x06sint32\x12\x16\n" +
	"\x06sint64\x18\x06 \x01(\x12R\x06sint64\x12\x18\n" +
	"\afixed32\x18\a \x01(\aR\afixed32\x12\x18\n" +
	"\afixed64\x18\b \x01(\x06R\afixed64\x12\x1a\n" +
	"\bsfixed32\x18\t \x01(\x0fR\bsfixed32\x12\x1a\n" +
	"\bsfixed64\x18\n" +
	" \x01(\x10R\bsfixed64\x12\x14\n" +
	"\x05float\x18\v \x01(\x02R\x05float\x12\x16\n" +
	"\x06double\x18\f \x01(\x01R\x06double\x12\x12\n" +
	"\x04bool\x18\r \x01(\bR\x04bool\x12\x16\n" +
	"\x06string\x18\x0e \x01(\tR\x06string\x12\x14\n" +
	"\x05bytes\x18\x0f \x01(\fR\x05bytesBIZ?google.golang.org/protobuf/internal/testprotos/lazy/lazy_hybrid\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_internal_testprotos_lazy_lazy_hybrid_lazy_tree_hybrid_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_internal_testprotos_lazy_lazy_hybrid_lazy_tree_hybrid_proto_goTypes = []any{
	(*Node)(nil), // 0: hybrid.lazy_tree.Node
}
var file_internal_testprotos_lazy_lazy_hybrid_lazy_tree_hybrid_proto_depIdxs = []int32{
	0, // 0: hybrid.lazy_tree.Node.nested:type_name -> hybrid.lazy_tree.Node
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_internal_testprotos_lazy_lazy_hybrid_lazy_tree_hybrid_proto_init() }
func file_internal_testprotos_lazy_lazy_hybrid_lazy_tree_hybrid_proto_init() {
	if File_internal_testprotos_lazy_lazy_hybrid_lazy_tree_hybrid_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_internal_testprotos_lazy_lazy_hybrid_lazy_tree_hybrid_proto_rawDesc), len(file_internal_testprotos_lazy_lazy_hybrid_lazy_tree_hybrid_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_internal_testprotos_lazy_lazy_hybrid_lazy_tree_hybrid_proto_goTypes,
		DependencyIndexes: file_internal_testprotos_lazy_lazy_hybrid_lazy_tree_hybrid_proto_depIdxs,
		MessageInfos:      file_internal_testprotos_lazy_lazy_hybrid_lazy_tree_hybrid_proto_msgTypes,
	}.Build()
	File_internal_testprotos_lazy_lazy_hybrid_lazy_tree_hybrid_proto = out.File
	file_internal_testprotos_lazy_lazy_hybrid_lazy_tree_hybrid_proto_goTypes = nil
	file_internal_testprotos_lazy_lazy_hybrid_lazy_tree_hybrid_proto_depIdxs = nil
}
